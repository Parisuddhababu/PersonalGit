{"version":3,"file":"static/js/5829.42aef5ae.chunk.js","mappings":"0LAMA,MAcA,EAdkBA,IAAmF,IAAlF,KAAEC,EAAI,OAAEC,EAAM,YAAEC,EAAW,UAAEC,EAAS,YAAEC,GAAoCL,EAE9F,MAAMM,GAAaC,EAAAA,EAAAA,cAAY,KAC9BL,EAAOD,IACNI,GAAeF,GAAY,GAC5BE,GAAeA,EAAYJ,EAAK,GAC9B,IAEH,OACCO,EAAAA,EAAAA,KAACC,EAAAA,EAAM,CAACL,UAAS,sDAAAM,OAAwDN,GAAaO,QAASL,EAAYM,MAAO,GAAIC,MAAM,SAAQC,UACnIN,EAAAA,EAAAA,KAACO,EAAAA,GAAK,CAACX,UAAU,gBACT,C,sFCfJ,MAAMY,GAAuBC,EAAAA,EAAAA,IAAGC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,oOAQ1BC,GAAwBH,EAAAA,EAAAA,IAAGI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,iNAQ3BG,GAA4BL,EAAAA,EAAAA,IAAGM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,8O,4ECjBrC,MAAMK,GAA2BP,EAAAA,EAAAA,IAAGC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,yyCAgI9BM,IAtEgCR,EAAAA,EAAAA,IAAGI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,q0CAsEPF,EAAAA,EAAAA,IAAGM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,kvB,gXC5E5C,MA2eA,EA3eqBO,KAAO,IAADC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EACvB,MAAM,EAAEC,IAAMC,EAAAA,EAAAA,MACRC,GAAWC,EAAAA,EAAAA,OACVC,IAAsBC,EAAAA,EAAAA,GAAY3B,EAAAA,KAClC4B,EAAsBC,IAA2BC,EAAAA,EAAAA,WAAkB,IACnEC,EAASC,IAAcF,EAAAA,EAAAA,UAAS,CAAC,IACjCG,EAASC,IAAcJ,EAAAA,EAAAA,WAAkB,GAC1CK,EAAiBC,aAAaC,QAAQ,aACtCC,EAAQH,IAAkBI,EAAAA,EAAAA,GAAmBJ,GAC7CK,GAAeC,EAAAA,EAAAA,QAAgC,OAC9CC,EAAmBC,IAAwBb,EAAAA,EAAAA,WAAkB,GAC9Dc,IAAWC,EAAAA,EAAAA,OACVC,GAAmBC,KAAwBjB,EAAAA,EAAAA,UAA+G,CAAEkB,aAAc,EAAGC,YAAa,EAAGC,WAAY,EAAGC,cAAe,MAC3NC,GAAYC,KAAiBvB,EAAAA,EAAAA,UAA2B,CAC3DwB,MAAOC,EAAAA,GACPC,KAAMC,EAAAA,GACNC,UAAW,UACXC,OAAQ,GACRC,UAAW,YACXC,MAAO,KAGJC,GAAmBC,KAAwBjC,EAAAA,EAAAA,UAAiB,KAC5DkC,GAAgBC,KAAqBnC,EAAAA,EAAAA,UAAiBsB,GAAWE,QAClE,SAAEY,KAAaC,EAAAA,EAAAA,KAAcC,GAAwDA,EAAMC,mBAC3F,gBAAEC,KAAoBH,EAAAA,EAAAA,KAAcC,GAAiEA,EAAMG,eAC1GC,GAAcC,KAAmB3C,EAAAA,EAAAA,UAA+B,KAChE4C,GAAmBC,KAAwB7C,EAAAA,EAAAA,WAAkB,IAC7D8C,GAAWC,KAAgB/C,EAAAA,EAAAA,UAAS,CAAC,IACrCgD,GAAsBC,KAAiBpD,EAAAA,EAAAA,GAAYqD,EAAAA,IACpDC,GAAqB,CACvB,CAAEC,KAAM5D,EAAE,SAAU6D,UAAU,GAC9B,CAAED,KAAM5D,EAAE,cAAe6D,UAAU,EAAMC,UAAW,cACpD,CAAEF,KAAM5D,EAAE,aAAc6D,UAAU,EAAMC,UAAW,aACnD,CAAEF,KAAM5D,EAAE,SAAU6D,UAAU,EAAMC,UAAW,SAC/C,CAAEF,KAAM5D,EAAE,gBAAiB6D,UAAU,EAAMC,UAAW,gBACtD,CAAEF,KAAM5D,EAAE,cAAe6D,UAAU,EAAMC,UAAW,cACpD,CAAEF,KAAM5D,EAAE,UAAW6D,UAAU,EAAMC,UAAW,UAChD,CAAEF,KAAM5D,EAAE,QAAS6D,UAAU,EAAMC,UAAW,6BAE1CnG,KAAMoG,KAAuBC,EAAAA,EAAAA,GAASC,EAAAA,EAAqB,CAAEC,UAAW,CAAEC,UAAW,OAEvF,KAAExG,GAAMyG,QAASC,KAAoBL,EAAAA,EAAAA,GAAS9E,EAAAA,GAA0B,CAC1EgF,UAAW,CACP9B,UAAWN,GAAWM,UACtBJ,MAAOF,GAAWE,MAClBE,KAAMJ,GAAWI,KACjBG,OAAQP,GAAWO,OACnBC,UAAWR,GAAWQ,aAOxBgC,IAAsBrG,EAAAA,EAAAA,cAAY,KACpCsC,GAAwB,EAAM,GAC/B,IAMH,SAASgE,KACLjD,IAASkD,EAAAA,EAAAA,OACTtE,EAAS,IAAD9B,OAAKqG,EAAAA,GAAOC,IAAG,KAAAtG,OAAIqG,EAAAA,GAAOE,iBAAgB,8BACtD,EAcAC,EAAAA,EAAAA,YAAU,KACN,GAAsB,OAAlBb,SAAkB,IAAlBA,IAAAA,GAAoBc,oBAAqB,CAAC,IAADC,EAAAC,EACzC,MAAMC,EAAc,GACF,OAAlBjB,SAAkB,IAAlBA,IAAuC,QAArBe,EAAlBf,GAAoBc,2BAAmB,IAAAC,GAAM,QAANC,EAAvCD,EAAyCnH,YAAI,IAAAoH,GAA7CA,EAA+CE,KAAKtH,IAChDqH,EAAYE,KAAK,CAAEtB,KAAMjG,EAAKwH,SAAUC,IAAS,OAAJzH,QAAI,IAAJA,OAAI,EAAJA,EAAM0H,MAAO,IAE9DlC,GAAgB6B,EACpB,IACD,CAACjB,KAKJ,MAYMuB,IAAgB,OAAJ3H,SAAI,IAAJA,IAAkD,QAA9C0B,EAAJ1B,GAAM4H,oDAA4C,IAAAlG,GAAM,QAANC,EAAlDD,EAAoD1B,YAAI,IAAA2B,OAApD,EAAJA,EAA0DkG,QAAS,EAC/EC,GAAaC,KAAKC,KAAKL,GAAY5C,IACnCkD,IAAmB3H,EAAAA,EAAAA,cAAa4H,IAClC,MAAMC,EAAoB,IACnBhE,GACHI,KAAM2D,EACNtD,OAAQsD,EAAU,GAAK/D,GAAWE,OAEtCD,GAAc+D,GACdC,EAAAA,EAAmBC,UAAU,qBAAsBC,KAAKC,UAAUJ,GAAmB,GACtF,CAAChE,GAAWE,SAEf4C,EAAAA,EAAAA,YAAU,KACNjC,GAAkBb,GAAWE,MAAM,GACpC,CAACF,GAAWE,QAKf,MAAMmE,IAAalI,EAAAA,EAAAA,cAAY,KAC3BmC,EAAmB,CACf8D,UAAW,CACPkC,iBAAkB3F,EAAQ4E,KAC1BgB,SAAU,CACNC,UAAW,MAIlBC,MAAMC,IACH,MAAM7I,EAAO6I,EAAI7I,KACjB8I,EAAAA,GAAMC,QAAQ/I,EAAKgJ,6BAA6BC,SAChDrG,GAAwB,GACxB8D,GAAgBvC,IAAY+E,OAAOC,GAAUL,EAAAA,GAAMK,MAAMA,IAAO,IAEnED,OAAOE,IAAS,IAADC,EAAAC,EACZR,EAAAA,GAAMK,MAAS,OAAHC,QAAG,IAAHA,GAAiB,QAAdC,EAAHD,EAAKG,oBAAY,IAAAF,GAAQ,QAARC,EAAjBD,EAAmBG,cAAM,IAAAF,OAAtB,EAAHA,EAA2BG,OAAO,GAAGR,QAAQ,GAC3D,GACP,CAACnG,EAAQ4E,OAMNgC,IAAepJ,EAAAA,EAAAA,cAAaqJ,IAC9BvF,GAAc,IAAKD,GAAYO,OAAQiF,EAAEC,OAAOC,OAAQ,GACzD,IAEGC,GAAgC,OAAfzE,SAAe,IAAfA,IAA2B,QAAZzD,EAAfyD,GAAiB0E,kBAAU,IAAAnI,GAAM,QAANC,EAA3BD,EAA6B5B,YAAI,IAAA6B,GAAe,QAAfC,EAAjCD,EAAmCmI,qBAAa,IAAAlI,OAAjC,EAAfA,EAAkD4F,MAEzET,EAAAA,EAAAA,YAAU,KACNP,GAAgBvC,IAAY+E,OAAOE,GAAQN,EAAAA,GAAMK,MAAMC,IAAK,GAC7D,CAACjF,KAMJ,MAYM8F,IAAS3J,EAAAA,EAAAA,cAAY,CAACoH,EAAcwC,EAAwBC,KAC9D5H,EAAS,IAAD9B,OAAKqG,EAAAA,GAAOC,IAAG,KAAAtG,OAAIqG,EAAAA,GAAOsD,YAAW,WAAA3J,OAAUiH,EAAI,cAAAjH,OAAayJ,EAAY,mCAAAzJ,OAAkC0J,GAAW,GAClI,IAEGE,IAAS/J,EAAAA,EAAAA,cAAY,CAACoH,EAAcwC,KACtC3H,EAAS,IAAD9B,OAAKqG,EAAAA,GAAOC,IAAG,KAAAtG,OAAIqG,EAAAA,GAAOsD,YAAW,WAAA3J,OAAUiH,EAAI,cAAAjH,OAAayJ,EAAY,mCAAkC,GACvH,KAEII,GAAWC,KAAgB1H,EAAAA,EAAAA,WAAS,GAErC2H,GAAWA,KACb9G,GAAqB,GACrB6G,IAAa,EAAM,EAEjBE,IAAgBnK,EAAAA,EAAAA,cAAY,KAC9BoK,EAAAA,EAAMC,IAAI,GAADlK,OAAImK,EAAAA,GAAY,mCAAmC,CAAEC,QAAS,CAAEC,cAAezH,EAAK,UAAA5C,OAAa4C,GAAU,IAAM0H,aAAc,SACnInC,MAAMoC,IAAc,IAADC,EAChB,MAAMC,EAAMC,OAAOC,IAAIC,gBAAgB,IAAIC,KAAK,CAACN,EAAShL,QACpDuL,EAAOC,SAASC,cAAc,KACpCF,EAAKG,KAAOR,EACZK,EAAKI,aAAa,WAAY,sBAC9BH,SAASI,KAAKC,YAAYN,GAC1BA,EAAKO,QACLhD,EAAAA,GAAMC,QAAgB,OAARiC,QAAQ,IAARA,GAAc,QAANC,EAARD,EAAUhL,YAAI,IAAAiL,OAAN,EAARA,EAAgBhC,QAAQ,IAEzCC,OAAOE,IACJN,EAAAA,GAAMK,MAAMC,EAAIH,QAAQ,GAC1B,GACP,IAEG8C,IAAuBzL,EAAAA,EAAAA,cAAY0L,UACrCzB,IAAa,GACb,MAAM0B,EAAQC,EAAMC,cAAcF,YAC5BG,EAAAA,EAAAA,IAAmB,CACrBH,QACAzF,UAAW,GACX6F,SAAUxH,GACVyH,iBAAkBA,KAAK5F,GAAgBvC,IAAY+E,OAAOC,GAAUL,EAAAA,GAAMK,MAAMA,IAAO,EACvFzF,uBACAI,wBACTyI,aAAc,MAELhJ,EAAaiJ,UACbjJ,EAAaiJ,QAAQ3C,MAAQ,GACjC,GACD,CAAChF,KAEE4H,IAAsBnM,EAAAA,EAAAA,cAAY,KACpCoK,EAAAA,EAAMC,IAAI,GAADlK,OAAImK,EAAAA,GAAY,+BAA+B,CAAEC,QAAS,CAAEC,cAAc,UAADrK,OAAY4C,IAAU0H,aAAc,SACjHnC,MAAMoC,IAAc,IAAD0B,EAChB,MAAMxB,EAAMC,OAAOC,IAAIC,gBAAgB,IAAIC,KAAK,CAACN,EAAShL,QACpDuL,EAAOC,SAASC,cAAc,KACpCF,EAAKG,KAAOR,EACZK,EAAKI,aAAa,WAAY,uBAC9BH,SAASI,KAAKC,YAAYN,GAC1BA,EAAKO,QACLhD,EAAAA,GAAMC,QAAgB,OAARiC,QAAQ,IAARA,GAAc,QAAN0B,EAAR1B,EAAUhL,YAAI,IAAA0M,OAAN,EAARA,EAAgBzD,QAAQ,IAEzCC,OAAOE,IACJN,EAAAA,GAAMK,MAAMC,EAAIH,QAAQ,GAC1B,GACP,IASG0D,IAAiBrM,EAAAA,EAAAA,cAAaN,IAChC0F,IAAqB,GACrBE,GAAa5F,EAAK,GACnB,IAEG4M,IAAuBtM,EAAAA,EAAAA,cAAY,KACrCuF,GAAqB,CACjBU,UAAW,CACPkC,iBAAkB9C,GAAU+B,QAG/BkB,MAAMC,IACH,MAAM7I,EAAO6I,EAAI7I,KACjB8I,EAAAA,GAAMC,QAAQ/I,EAAK6M,uBAAuB5D,SAC1CvD,IAAqB,GACrBgB,IAAiB,IAEpBwC,OAAOE,IAAS,IAAD0D,EAAAC,EAAAC,EACZlE,EAAAA,GAAMK,MAAS,OAAHC,QAAG,IAAHA,GAAiB,QAAd0D,EAAH1D,EAAKG,oBAAY,IAAAuD,GAAQ,QAARC,EAAjBD,EAAmBtD,cAAM,IAAAuD,GAAW,QAAXC,EAAzBD,EAA2BtD,OAAO,UAAE,IAAAuD,OAAjC,EAAHA,EAAsC/D,QAAQ,GAC5D,GACP,CAACxD,KAEEwH,IAAoB3M,EAAAA,EAAAA,cAAY,KAClCoF,IAAqB,EAAM,GAC5B,IAIH,OACIwH,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAtM,SAAA,CACKmC,IAAWzC,EAAAA,EAAAA,KAAC6M,EAAAA,EAAM,KACnB7M,EAAAA,EAAAA,KAAC8M,EAAAA,EAAa,CAACC,kBAjHGA,KAElB/M,EAAAA,EAAAA,KAAA4M,EAAAA,SAAA,CAAAtM,SACMiJ,KAA0B,OAAR7E,SAAQ,IAARA,QAAQ,EAARA,GAAUsI,SAAUhN,EAAAA,EAAAA,KAACC,EAAAA,EAAM,CAC3CL,UAAU,wCACVO,QAASkG,GACT4G,KAAK,SACL7M,MAAO0B,EAAE,8BA2GjB6K,EAAAA,EAAAA,MAAA,OAAK/M,UAAU,wEAAuEU,SAAA,EAClFqM,EAAAA,EAAAA,MAAA,OAAK/M,UAAU,0EAAyEU,SAAA,EACpFN,EAAAA,EAAAA,KAAA,MAAIJ,UAAU,8BAA6BU,SAAEwB,EAAE,oBAC/C6K,EAAAA,EAAAA,MAAA,OAAK/M,UAAU,iCAAgCU,SAAA,EAC3CqM,EAAAA,EAAAA,MAAA,UAAQ/M,UAAU,yCAAyCO,QA5ClD+M,KACzBlD,IAAa,EAAK,EA2CwF3J,MAAK,GAAAH,OAAK4B,EAAE,WAAYxB,SAAA,CAAE,0BAAsBN,EAAAA,EAAAA,KAACmN,EAAAA,GAAS,CAACvN,UAAU,yBAE/J+M,EAAAA,EAAAA,MAAA,UAAQ/M,UAAU,yCAAyCO,QAASA,IAAI+J,KAAiB7J,MAAK,GAAAH,OAAK4B,EAAE,WAAYxB,SAAA,CAAC,2BACvFN,EAAAA,EAAAA,KAACmN,EAAAA,GAAS,CAACvN,UAAU,yBAGhDI,EAAAA,EAAAA,KAAA,UAAQJ,UAAU,+DAA+DqN,KAAK,SAAS9M,QAASA,IAAM+L,KAAuB7L,MAAK,GAAAH,OAAK4B,EAAE,aAAcxB,SAAC,yBAEhKN,EAAAA,EAAAA,KAACoN,EAAAA,EAAS,CACNH,KAAK,OACLI,GAAG,eACH/D,MAAO1F,GAAWO,OAClBvE,UAAU,sBACV0N,YAAaxL,EAAE,UACfyL,SAAUpE,GACVqE,WAAWxN,EAAAA,EAAAA,KAACyN,EAAAA,GAAM,CAACC,SAAS,KAAK9N,UAAU,yBAIvD+M,EAAAA,EAAAA,MAAA,OAAK/M,UAAU,0GAAyGU,SAAA,EACpHqM,EAAAA,EAAAA,MAAA,SAAArM,SAAA,EACIN,EAAAA,EAAAA,KAAA,SAAAM,UACIqM,EAAAA,EAAAA,MAAA,MAAArM,SAAA,CACuB,OAAlBmF,SAAkB,IAAlBA,QAAkB,EAAlBA,GAAoBsB,KAAI,CAAC4G,EAAwBtJ,KAE1CrE,EAAAA,EAAAA,KAAA,MAAI4N,MAAM,MAA+BhO,UAAS,GAAAM,OAAwB,SAAnByN,EAAWjI,KAAkB,OAAS,IAAKpF,UAC9FqM,EAAAA,EAAAA,MAAA,OAAK/M,UAAU,oBAAmBU,SAAA,CAC7BqN,EAAWjI,KACXiI,EAAWhI,WACRgH,EAAAA,EAAAA,MAAA,UAAQxM,QAASA,KAAM0N,OA7O7CC,EA6O8DH,EAAW/H,eA5O/F/B,GAAc,IACPD,GACHQ,UAAW0J,EACX5J,UAAoC,WAAzBN,GAAWM,UAAyB,UAAY,WAJzC4J,KA6OoF,EAAAxN,SAAA,EAC/B,KAAzBsD,GAAWM,WAAoBN,GAAWQ,YAAcuJ,EAAW/H,aACjE5F,EAAAA,EAAAA,KAAC+N,EAAAA,GAAc,CAACnO,UAAU,4BACJ,WAAzBgE,GAAWM,WAA0BN,GAAWQ,YAAcuJ,EAAW/H,YACtE5F,EAAAA,EAAAA,KAACgO,EAAAA,GAAc,CAACpO,UAAU,oBACJ,YAAzBgE,GAAWM,WAA2BN,GAAWQ,YAAcuJ,EAAW/H,YACvE5F,EAAAA,EAAAA,KAACiO,EAAAA,GAAgB,CAACrO,UAAU,2BAGtC,OAAAM,OAbkBmE,EAAQ,OAkB5CrE,EAAAA,EAAAA,KAAA,MAAI4N,MAAM,MAAKtN,UACXN,EAAAA,EAAAA,KAAA,OAAKJ,UAAU,oBAAmBU,SAAEwB,EAAE,kBAvBvC,YA2BX9B,EAAAA,EAAAA,KAAA,SAAAM,SACS,OAAJb,SAAI,IAAJA,IAAkD,QAA9C+B,EAAJ/B,GAAM4H,oDAA4C,IAAA7F,GAAM,QAANC,EAAlDD,EAAoD/B,YAAI,IAAAgC,GAAU,QAAVC,EAAxDD,EAA0DiD,gBAAQ,IAAAhD,OAA9D,EAAJA,EAAoEqF,KAAI,CAACtH,EAA0N4E,KAAmB,IAAD6J,EAAAC,EAClT,MAAMC,GAAyB,OAAVxK,SAAU,IAAVA,QAAU,EAAVA,GAAYS,OAAkBA,EAAQ,EACrDsF,EAAmB,OAAJlK,QAAI,IAAJA,GAAmB,QAAfyO,EAAJzO,EAAM4O,qBAAa,IAAAH,OAAf,EAAJA,EAAqBnH,KAAKuH,IAA0C,IAADC,EACpF,OAAa,OAAND,QAAM,IAANA,GAAc,QAARC,EAAND,EAAQA,cAAM,IAAAC,OAAR,EAANA,EAAgBpH,IAAI,IAE/B,OACIwF,EAAAA,EAAAA,MAAA,MAAArM,SAAA,EAEIN,EAAAA,EAAAA,KAAA,MAAI4N,MAAM,MAAMhO,UAAU,iBAAgBU,SACrC8N,KAELpO,EAAAA,EAAAA,KAAA,MAAIJ,UAAU,YAAWU,SAAEb,EAAK+O,cAChCxO,EAAAA,EAAAA,KAAA,MAAIJ,UAAU,YAAWU,SAAEb,EAAKgP,aAChCzO,EAAAA,EAAAA,KAAA,MAAIJ,UAAU,YAAWU,SAAEb,EAAKiP,SAChC1O,EAAAA,EAAAA,KAAA,MAAIJ,UAAU,YAAWU,SAAEb,EAAKkP,gBAChC3O,EAAAA,EAAAA,KAAA,MAAIJ,UAAU,YAAWU,SAAEb,EAAKmP,cAChC5O,EAAAA,EAAAA,KAAA,MAAIJ,UAAU,wBAAuBU,UACjCN,EAAAA,EAAAA,KAAA,OAAKJ,UAAU,OAAMU,UACZ,OAAJb,QAAI,IAAJA,OAAI,EAAJA,EAAMoP,UAAWC,EAAAA,GAAiBC,QAC/B/O,EAAAA,EAAAA,KAAA,QAAMJ,UAAU,0BAAyBU,SAAC,YAI1CN,EAAAA,EAAAA,KAAA,QAAMJ,UAAU,aAAYU,SAAC,iBAMpC,OAAJb,QAAI,IAAJA,GAAgB,QAAZ0O,EAAJ1O,EAAMuP,kBAAU,IAAAb,OAAZ,EAAJA,EAAkBpH,KAAKkI,IAAqD,IAAAC,EAAAC,EAAA,OACzEnP,EAAAA,EAAAA,KAAA,MAAkCJ,UAAU,YAAWU,SAAU,OAAR2O,QAAQ,IAARA,GAAiB,QAATE,EAARF,EAAUG,eAAO,IAAAD,OAAT,EAARA,EAAmBzJ,MAA3D,OAARuJ,QAAQ,IAARA,GAAiB,QAATC,EAARD,EAAUG,eAAO,IAAAF,OAAT,EAARA,EAAmB/H,KAA0D,KAE1FnH,EAAAA,EAAAA,KAAA,MAAAM,UACIqM,EAAAA,EAAAA,MAAA,OAAK/M,UAAU,eAAcU,SAAA,CACvBiJ,KAA0B,OAAR7E,SAAQ,IAARA,QAAQ,EAARA,GAAU2K,QAAS1C,EAAAA,EAAAA,MAAC1M,EAAAA,EAAM,CAACE,QAASA,IAAM2J,GAAOrK,EAAK0H,KAAMwC,GAAevJ,MAAO,GAAGE,SAAA,EAACN,EAAAA,EAAAA,KAACsP,EAAAA,GAAG,CAAC1P,UAAU,gCAAgC,OACvJ2J,KAA0B,OAAR7E,SAAQ,IAARA,QAAQ,EAARA,GAAU6K,UAAWvP,EAAAA,EAAAA,KAACC,EAAAA,EAAM,CAACL,UAAU,6BAA6BO,QAASA,IAAMuJ,GAAW,OAAJjK,QAAI,IAAJA,OAAI,EAAJA,EAAM0H,KAAMwC,EAAkB,OAAJlK,QAAI,IAAJA,OAAI,EAAJA,EAAM2I,WAAYhI,MAAO,GAAGE,UAChKN,EAAAA,EAAAA,KAACwP,EAAAA,GAAI,MAEPjG,KAA0B,OAAR7E,SAAQ,IAARA,QAAQ,EAARA,GAAU+K,UAAWzP,EAAAA,EAAAA,KAAC0P,EAAAA,EAAS,CAACjQ,KAAMA,EAAMC,OAAQ8C,EAAY7C,YAAa0C,KAEjGrC,EAAAA,EAAAA,KAAA,OAAKJ,UAAU,sBAAqBU,SAC/BiJ,KAA0B,OAAR7E,SAAQ,IAARA,QAAQ,EAARA,GAAU6K,UAAUvP,EAAAA,EAAAA,KAAA,QACnCJ,UAAU,4CAA2CU,UAErDqM,EAAAA,EAAAA,MAAA,SAAO/M,UAAU,wDAAuDU,SAAA,EACpEN,EAAAA,EAAAA,KAAA,SACIiN,KAAK,WACLrN,UAAU,eACV0J,MAAW,OAAJ7J,QAAI,IAAJA,OAAI,EAAJA,EAAMoP,OACbtB,SAAUA,IAAMnB,GAAe3M,GAC/BkQ,SAAa,OAAJlQ,QAAI,IAAJA,OAAI,EAAJA,EAAMoP,UAAWC,EAAAA,GAAiBC,UAE/C/O,EAAAA,EAAAA,KAAA,OACIJ,UACI,4WAhDnB,OAAJH,QAAI,IAAJA,OAAI,EAAJA,EAAM0H,KAwDV,UAKiD,KAAhE,OAAJ1H,SAAI,IAAJA,IAAkD,QAA9CkC,EAAJlC,GAAM4H,oDAA4C,IAAA1F,GAAM,QAANC,EAAlDD,EAAoDlC,YAAI,IAAAmC,OAApD,EAAJA,EAA0D0F,QACK,QAAzD,OAAJ7H,SAAI,IAAJA,IAAkD,QAA9CoC,EAAJpC,GAAM4H,oDAA4C,IAAAxF,OAA9C,EAAJA,EAAoDpC,SAChDO,EAAAA,EAAAA,KAAA,OAAKJ,UAAU,sBAAqBU,UAChCN,EAAAA,EAAAA,KAAA,OAAAM,SAAMwB,EAAE,mBAKxB6K,EAAAA,EAAAA,MAAA,OAAK/M,UAAU,oEAAmEU,SAAA,EAC9EqM,EAAAA,EAAAA,MAAA,OAAK/M,UAAU,oBAAmBU,SAAA,EAC9BN,EAAAA,EAAAA,KAAA,QAAMJ,UAAU,qCAAoCU,SAC/CwB,EAAE,eAEP9B,EAAAA,EAAAA,KAAA,UACIJ,UAAU,4HACV0J,MAAO1F,GAAWE,MAClByJ,SAAWnE,GA/TNA,KACzB3E,GAAkBmL,OAAOxG,IACzB,MAAMxB,EAAoB,IACnBhE,GACHE,MAAO+L,SAASzG,GAChBpF,KAAMC,EAAAA,GACNI,MAAO,GAEXR,GAAc+D,GACdC,EAAAA,EAAmBC,UAAU,qBAAsBC,KAAKC,UAAUJ,GAAmB,EAsThDkI,CAAoB1G,EAAEC,OAAOC,OAAOhJ,SAEjC,OAAnByP,EAAAA,SAAmB,IAAnBA,EAAAA,QAAmB,EAAnBA,EAAAA,GAAqBhJ,KAAI,CAACiJ,EAAc3L,KAC9BrE,EAAAA,EAAAA,KAAA,UAAAM,SAA8B0P,GAAI,GAAA9P,OAAlBmE,EAAQ,YAI3CrE,EAAAA,EAAAA,KAACiQ,EAAAA,EAAU,CAACC,YAAatM,GAAWI,KAChCuD,WAAYA,GACZ4I,aAAczI,GACdlD,eAAgBA,QAGvBpC,IAAwBpC,EAAAA,EAAAA,KAACoQ,EAAAA,EAAW,CAACC,YAAaC,EAAAA,GAAqBC,QAASnK,GAAqBoK,OAAQvI,GAAYwI,KAAMrO,QAGpIpC,EAAAA,EAAAA,KAAC0Q,EAAAA,EAAiB,CACdxN,kBAAmBA,EACnBI,kBAAmBA,GACnB2G,SAAUA,KAGbF,KACG/J,EAAAA,EAAAA,KAAA,OAAKqN,GAAG,eAAesD,UAAW,EAAG,mBAAiB,EAAM,cAAY,QAAQ/Q,UAAS,yDAAAM,OAA2D6J,GAAY,GAAK,UAAWzJ,UAC5KN,EAAAA,EAAAA,KAAA,OAAKqN,GAAG,wBAAwBsD,UAAW,EAAG,mBAAiB,EAAM,cAAY,QAAQ/Q,UAAS,gDAAAM,OAAkD6J,GAAY,GAAK,mDAAkD,iCAAgCzJ,UACnPN,EAAAA,EAAAA,KAAA,OAAKJ,UAAU,+BAA8BU,UAEzCqM,EAAAA,EAAAA,MAAA,OAAK/M,UAAU,+BAA8BU,SAAA,EAEzCqM,EAAAA,EAAAA,MAAA,OAAK/M,UAAU,yFAAwFU,SAAA,EACnGN,EAAAA,EAAAA,KAAA,KAAGJ,UAAU,8CAA6CU,SAAE,2BAC5DN,EAAAA,EAAAA,KAACC,EAAAA,EAAM,CAACE,QAASA,IAAM8J,KAAY7J,MAAM,GAAGC,MAAK,GAAAH,OAAK4B,EAAE,UAAWxB,UAC/DN,EAAAA,EAAAA,KAAA,QAAMJ,UAAU,aAAYU,UAACN,EAAAA,EAAAA,KAAC4Q,EAAAA,GAAK,CAAChR,UAAU,uBAKtD+M,EAAAA,EAAAA,MAAA,OAAK/M,UAAU,aAAYU,SAAA,EAC3BqM,EAAAA,EAAAA,MAAA,KAAG/M,UAAU,OAAMU,SAAA,EAACN,EAAAA,EAAAA,KAAA,KAAGJ,UAAU,aAAYU,SAAC,YAAW,8DACrDN,EAAAA,EAAAA,KAAA,OAAKJ,UAAU,cAAaU,UACxBN,EAAAA,EAAAA,KAAC6Q,EAAAA,EAAQ,CAACvD,YAAaxL,EAAE,mBAAoBlC,UAAU,SAASQ,MAAO0B,EAAE,YAAa0L,WAAWxN,EAAAA,EAAAA,KAAA,QAAMJ,UAAU,UAASU,UAACN,EAAAA,EAAAA,KAAC8Q,EAAAA,GAAiB,CAAClR,UAAU,qBAA4B2N,SApN9LnE,IACtB7E,GAAqB6E,EAAEC,OAAOC,MAAM,EAmN4MA,MAAOhF,GAAmByM,QAAS/L,GAAcU,KAAK,WAAW2H,GAAG,WAAW2D,UAAU,OAG7SrE,EAAAA,EAAAA,MAAA,SAAOU,GAAG,YAAYzN,UAAU,iCAAgCU,SAAA,CAAC,2BACtCN,EAAAA,EAAAA,KAACmN,EAAAA,GAAS,CAACvN,UAAU,qBAAqB,IAAE,IACnEI,EAAAA,EAAAA,KAAA,SACIqN,GAAG,YACHJ,KAAK,OACLvH,KAAK,YACLuL,UAAQ,EACRC,IAAKlO,EACLpD,UAAU,8BACVuR,OAAO,OACP5D,SAAWnE,GAAMoC,GAAqBpC,GAEtCgI,UAAW9M,KADN+M,EAAAA,EAAAA,qBAWpCnM,KACGlF,EAAAA,EAAAA,KAACoQ,EAAAA,EAAW,CACRC,YAAaiB,EAAAA,GACbf,QAAS7D,GACT8D,OAAQnE,GACRoE,KAAMvL,GACNkM,SAAuB,OAAb7L,SAAa,IAAbA,QAAa,EAAbA,GAAe9C,QACzB8O,UAAwB,OAAbhM,SAAa,IAAbA,QAAa,EAAbA,GAAe9C,YAInC,C","sources":["components/common/deleteBtn.tsx","framework/graphql/mutations/employeeuser.ts","framework/graphql/queries/employeeuser.ts","views/employeeUser/index.tsx"],"sourcesContent":["import React, { useCallback } from 'react';\n\nimport Button from '@components/button/button';\nimport { Trash } from '@components/icons/icons';\nimport { DeleteComponentsProps } from 'src/types/common';\n\nconst DeleteBtn = ({ data, setObj, setIsDelete, className ,customClick }: DeleteComponentsProps) => {\n\n\tconst deleteData = useCallback(() => {\n\t\tsetObj(data);\n\t\t!customClick && setIsDelete(true);\n\t\tcustomClick && customClick(data);\n\t}, []);\n\n\treturn (\n\t\t<Button className={`bg-transparent cursor-pointer btn-default btn-icon ${className}`} onClick={deleteData} label={''} title='Delete'>\n\t\t\t<Trash className='fill-error' />\n\t\t</Button>\n\t);\n};\nexport default DeleteBtn;\n","import { gql } from '@apollo/client';\n\nexport const DELETE_EMPLOYEE_USER = gql`\n  mutation DeleteSubscriberEmployeeUser($subscriberUserId: String!, $userData: DeleteUserDto) {\n    deleteSubscriberEmployeeUser(subscriberUserId: $subscriberUserId, userData: $userData) {\n      message\n    }\n  }\n`\n\nexport const DELETE_TENANT_COMPANY = gql`\nmutation DeleteTenantCompany($tenantBranchId: String!, $tenantCompanyId: String!) {\n  deleteTenantCompany(tenantBranchId: $tenantBranchId, tenantCompanyId: $tenantCompanyId) {\n    message\n  }\n}\n`\n\nexport const DELETE_CONTRACTOR_COMPANY = gql`\nmutation DeleteContractorCompany($contractorBranchId: String!, $contractorCompanyId: String!) {\n  deleteContractorCompany(contractorBranchId: $contractorBranchId, contractorCompanyId: $contractorCompanyId) {\n    message\n  }\n}`","import { gql } from '@apollo/client';\nexport const FETCH_EMPLOYEE_USER_LIST = gql `\nquery GetSubscriberEmployeesUserListWithPagination($sortOrder: String!, $sortField: String!, $limit: Float!, $page: Float!, $search: String!) {\n    getSubscriberEmployeesUserListWithPagination(sortOrder: $sortOrder, sortField: $sortField, limit: $limit, page: $page, search: $search) {\n      message\n      data {\n        employee {\n          email\n          uuid\n          status\n          first_name\n          last_name\n          user_type\n          phone_number\n          country_code {\n            id\n            uuid\n            name\n            countryCode\n            phoneCode\n          }\n          department\n          company_id {\n            uuid\n            name\n            description\n            type\n            attachments\n            website_url            \n            industryType {\n              uuid\n              name\n              description\n            }\n          }\n          user_roles {\n            uuid\n            role_id {\n              uuid\n              name\n              description\n              status\n            }\n          }\n          user_branches {\n            uuid\n            branch {\n              location\n              city\n              uuid\n            }\n          }\n        }\n        count\n      }\n    }\n  }`\n\n\nexport const FETCH_EMPLOYEE_USER_LIST_VIEW = gql `\nquery GetSubscriberEmployeeById($subscriberUserId: String!, $userType: Float) {\n  getSubscriberEmployeeById(subscriberUserId: $subscriberUserId, userType: $userType) {\n    message\n    data {\n      uuid\n      email\n      pronounce\n      first_name\n      last_name\n      phone_number\n      country_code {\n        id\n        uuid\n        name\n        countryCode\n        phoneCode\n      }\n      preferred_language\n      location\n      department\n      user_roles {\n        uuid\n        role_id {\n          uuid\n          name\n          description\n          status\n        }\n      }\n      reporting_manager_id {\n        id\n        email\n        uuid\n        status\n        pronounce\n        position\n        first_name\n        last_name\n        phone_number\n        country_code\n        profile_picture\n        preferred_language\n        educational_interests\n        organization\n        location\n        department\n        reporting_manager_id\n        user_type\n        company_id\n        branch_id\n        subscriber_id {\n          uuid\n          first_name\n          last_name \n          company_name\n          address\n          phone_number\n          logo\n          subscribe_start\n          subscribe_end\n          email\n          status\n        }\n      }\n    }\n  }\n}\n`\n\nexport const FETCH_TENANT_COMPANY_LIST = gql `\nquery GetTenantsContractorsCompaniesWithPagination($userData: GetCompanyTypeDto!) {\n  getTenantsContractorsCompaniesWithPagination(userData: $userData) {\n    message\n    data {\n      data {\n        status\n        company {\n          uuid\n          name\n          description\n          type\n          attachments\n          website_url          \n          industryType {\n            uuid\n            name\n            description\n          }\n          tenantContractorType {\n            uuid\n            name\n            description\n            type\n          }\n        }\n        branch {\n          uuid\n          location\n          status\n        }        \n        user_count\n      }\n      count\n    }\n  }\n}\n\n`","import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useNavigate } from 'react-router-dom';\nimport { v4 as uuidv4 } from 'uuid';\nimport { toast } from 'react-toastify';\nimport TextInput from '@components/textInput/TextInput';\nimport Pagination from '@components/Pagination/Pagination';\nimport Button from '@components/button/button';\nimport filterServiceProps from '@components/filter/filter';\nimport DeleteBtn from '@components/common/deleteBtn';\nimport CommonModel from '@components/common/commonModel';\nimport { API_BASE_URL, CHANGE_STATUS_WARNING_TEXT, ContractorStatus, DELETE_WARNING_TEXT, PAGE_LIMIT, PAGE_NUMBER, ROUTES, SHOW_PAGE_COUNT_ARR } from '@config/constant';\nimport { ArrowSortingDown, ArrowSortingUp, Cross, DropdownArrowDown, Edit, Eye, GetDefaultIcon, ImportDoc, Search } from '@components/icons/icons';\nimport { SubscriberDatalist } from '@framework/graphql/graphql';\nimport { useMutation, useQuery } from '@apollo/client';\nimport { PaginationParams, ColArrType, DropdownOptionType } from '@types';\nimport UpdatedHeader from '@components/header/updatedHeader';\nimport { FETCH_EMPLOYEE_USER_LIST } from '@framework/graphql/queries/employeeuser';\nimport { DELETE_EMPLOYEE_USER } from '@framework/graphql/mutations/employeeuser';\nimport axios from 'axios'\nimport DecryptionFunction from 'src/services/decryption';\nimport { setCreateNewAccountStep } from 'src/redux/courses-management-slice';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { UserProfileType, UserRoles } from 'src/types/common';\nimport DropDown from '@components/dropdown/dropDown';\nimport { SUBSCRIBER_LOCATION } from '@framework/graphql/queries/createEmployeeLocation';\nimport Loader from '@components/common/loader';\nimport { CHANGE_EMPLOYEE_STATUS } from '@framework/graphql/mutations/contractorPage';\nimport RejectedUserPopup from '@components/tenantDetails/rejectedUserPopup';\nimport { importEmployeeList } from '@config/common';\n\ninterface RejectedUserType {    \n    uuid: string,\n    first_name: string,\n    last_name: string,\n    email: string,\n    phone_number: string,\n    role: string,\n    reason: string\n}\n\ninterface EmployeeData {\n    first_name: string,\n    last_name: string,\n    email: string,\n    phone_number: number,\n    department: string,\n    user_roles: [],\n    uuid: string,\n    status: number,\n    user_branches: [{ branch: { uuid: string } }],\n}\n\nconst EmployeeUser = () => {\n    const { t } = useTranslation();\n    const navigate = useNavigate();\n    const [deleteEmployeeById] = useMutation(DELETE_EMPLOYEE_USER);\n    const [isDeleteUserEmployee, setIsDeleteUserEmployee] = useState<boolean>(false);\n    const [userObj, setUserObj] = useState({} as SubscriberDatalist);\n    const [loading, setLoading] = useState<boolean>(false);\n    const encryptedToken = localStorage.getItem('authToken') as string;\n    const token = encryptedToken && DecryptionFunction(encryptedToken);\n    const fileInputRef = useRef<HTMLInputElement | null>(null);\n    const [rejectedUserPopup, setRejectedUserPopup] = useState<boolean>(false);\n    const dispatch = useDispatch();\n    const [rejectedUsersData, setRejectedUsersData] = useState<{ successCount: number; rejectCount: number; totalCount: number; rejectedUsers: RejectedUserType[] }>({ successCount: 0, rejectCount: 0, totalCount: 0, rejectedUsers: [] });\n    const [filterData, setFilterData] = useState<PaginationParams>({\n        limit: PAGE_LIMIT,\n        page: PAGE_NUMBER,\n        sortOrder: 'descend',\n        search: '',\n        sortField: 'createdAt',\n        index: 0\n\n    });\n    const [locationSelection, setLocationSelection] = useState<string>('')\n    const [recordsPerPage, setRecordsPerPage] = useState<number>(filterData.limit);\n    const { employee } = useSelector(((state: { rolesManagement: { employee: UserRoles } }) => state.rolesManagement));\n    const { userProfileData } = useSelector(((state: { userProfile: { userProfileData: UserProfileType } }) => state.userProfile));\n    const [stateDrpData, setStateDrpData] = useState<DropdownOptionType[]>([]);\n    const [isStatusModelShow, setIsStatusModelShow] = useState<boolean>(false)\n    const [tenantObj, setTenantObj] = useState({} as EmployeeData);\n    const [updateEmployeeStatus, statusLoading] = useMutation(CHANGE_EMPLOYEE_STATUS);\n    const COL_ARR_SUBSCRIBER = [\n        { name: t('Sr.No'), sortable: false },\n        { name: t('First Name'), sortable: true, fieldName: 'first_name' },\n        { name: t('Last Name'), sortable: true, fieldName: 'last_name' },\n        { name: t('Email'), sortable: true, fieldName: 'email' },\n        { name: t('Phone Number'), sortable: true, fieldName: 'phone_number' },\n        { name: t('Department'), sortable: true, fieldName: 'department' },\n        { name: t('Status'), sortable: true, fieldName: 'status' },\n        { name: t('Role'), sortable: true, fieldName: 'user_roles.role_id.name' },\n    ] as ColArrType[];\n    const { data: subscriberLocation } = useQuery(SUBSCRIBER_LOCATION, { variables: { companyId: '' } });\n\n    const { data, refetch: getEmployeeData } = useQuery(FETCH_EMPLOYEE_USER_LIST, {\n        variables: {\n            sortOrder: filterData.sortOrder,\n            limit: filterData.limit,\n            page: filterData.page,\n            search: filterData.search,\n            sortField: filterData.sortField,\n        },\n    });\n\n    /**\n     * Method used for close model\n     */\n    const onCloseUserEmployee = useCallback(() => {\n        setIsDeleteUserEmployee(false);\n    }, []);\n\n\n    /**\n        * Method used for Add Subscriber sets data\n    */\n    function handleAddUser () {\n        dispatch(setCreateNewAccountStep());\n        navigate(`/${ROUTES.app}/${ROUTES.createNewAccount}/?employees-user-list=true`)\n    }\n    /**\n     *\n     * @param sortFieldName Method used for storing sort data\n     */\n\n    const onHandleSortUser = (sortFieldName: string) => {\n        setFilterData({\n            ...filterData,\n            sortField: sortFieldName,\n            sortOrder: filterData.sortOrder === 'ascend' ? 'descend' : 'ascend',\n        });\n    };\n\n    useEffect(() => {\n        if (subscriberLocation?.subscriberLocations) {\n            const tempDataArr = [] as DropdownOptionType[];\n            subscriberLocation?.subscriberLocations?.data?.map((data: { location: string, uuid: string }) => {\n                tempDataArr.push({ name: data.location, key: data?.uuid });\n            });\n            setStateDrpData(tempDataArr);\n        }\n    }, [subscriberLocation]);\n    /**\n     *\n     * @param e Method used for change dropdown for page limit\n     */\n    const onPageDrpSelectUser = (e: string) => {\n        setRecordsPerPage(Number(e))\n        const updatedFilterData = {\n            ...filterData,\n            limit: parseInt(e),\n            page: PAGE_NUMBER,\n            index: 0,\n        };\n        setFilterData(updatedFilterData);\n        filterServiceProps.saveState('filterEmployeeUser', JSON.stringify(updatedFilterData));\n    };\n\n    const totalUser = data?.getSubscriberEmployeesUserListWithPagination?.data?.count || 0;\n    const totalPages = Math.ceil(totalUser / recordsPerPage);\n    const handlePageChange = useCallback((newPage: number): void => {\n        const updatedFilterData = {\n            ...filterData,\n            page: newPage,\n            index: (newPage - 1) * filterData.limit,\n        }\n        setFilterData(updatedFilterData);\n        filterServiceProps.saveState('filterEmployeeUser', JSON.stringify(updatedFilterData));\n    }, [filterData.limit])\n\n    useEffect(() => {\n        setRecordsPerPage(filterData.limit);\n    }, [filterData.limit]);\n    /**\n * Method used for delete user data\n */\n\n    const deleteUser = useCallback(() => {\n        deleteEmployeeById({\n            variables: {\n                subscriberUserId: userObj.uuid,\n                userData: {\n                    user_type: 3\n                }\n            },\n        })\n            .then((res) => {\n                const data = res.data\n                toast.success(data.deleteSubscriberEmployeeUser.message)\n                setIsDeleteUserEmployee(false)\n                getEmployeeData(filterData).catch((error) => toast.error(error))\n            })\n            .catch((err) => {\n                toast.error(err?.networkError?.result?.errors[0].message)\n            })\n    }, [userObj.uuid]);\n\n    /**\n   *\n   * @param e Method used for store search value\n   */\n    const onSearchUser = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n        setFilterData({ ...filterData, search: e.target.value })\n    }, [])\n\n    const subscriberUUID = userProfileData?.getProfile?.data?.subscriber_id?.uuid;\n\n    useEffect(() => {\n        getEmployeeData(filterData).catch((err) => toast.error(err))\n    }, [filterData])\n    /**\n     *\n     * @param obj Method Used for edit Category data\n     */\n\n    const headerActionConst = () => {\n        return (\n            <>\n                {(subscriberUUID && employee?.write) && <Button\n                    className='ml-5 btn-normal md: btn btn-secondary'\n                    onClick={handleAddUser}\n                    type='button'\n                    label={t('Create New Employee')}\n                />}\n            </>\n        )\n    }\n    const onEdit = useCallback((uuid: string, branchIdName: string[], userType: number) => {\n        navigate(`/${ROUTES.app}/${ROUTES.userDetails}/?uuid=${uuid}&branchId=${branchIdName}&userTypeId=true&userTypeValue=${userType}`)\n    }, []);\n\n    const onView = useCallback((uuid: string, branchIdName: string[]) => {\n        navigate(`/${ROUTES.app}/${ROUTES.userDetails}/?uuid=${uuid}&branchId=${branchIdName}&read_Data=true&userTypeId=true`)\n    }, [])\n\n    const [userPopup, setUserPopup] = useState(false)\n\n    const oncancel = () => {\n        setRejectedUserPopup(false);\n        setUserPopup(false);\n    }\n    const onDownloadCsv = useCallback(() => {\n        axios.get(`${API_BASE_URL}users/export-employee-user-csv/`, { headers: { authorization: token ? `Bearer ${token}` : '' }, responseType: 'blob' })\n            .then((response) => {\n                const url = window.URL.createObjectURL(new Blob([response.data]));\n                const link = document.createElement('a');\n                link.href = url;\n                link.setAttribute('download', 'Employee-Users.csv');\n                document.body.appendChild(link);\n                link.click();\n                toast.success(response?.data?.message);\n            })\n            .catch((err) => {\n                toast.error(err.message);\n            });\n    }, []);\n\n    const onImportEmployeeList = useCallback(async (event: React.ChangeEvent<HTMLInputElement>) => {\n        setUserPopup(false)\n        const files = event.currentTarget.files;      \n        await importEmployeeList({\n            files,\n            companyId: '',\n            branchId: locationSelection,\n            onImportCallBack: ()=>{getEmployeeData(filterData).catch((error) => toast.error(error));},\n            setRejectedUserPopup,\n            setRejectedUsersData,\n\t\t\temployeeType: '3'\n        }) \n        if (fileInputRef.current) {\n            fileInputRef.current.value = '';\n        }\n    }, [locationSelection]);\n\n    const onDownloadSampleCsv = useCallback(() => {\n        axios.get(`${API_BASE_URL}media/download-csv/employee`, { headers: { authorization: `Bearer ${token}`}, responseType: 'blob' })\n            .then((response) => {\n                const url = window.URL.createObjectURL(new Blob([response.data]));\n                const link = document.createElement('a');\n                link.href = url;\n                link.setAttribute('download', 'Employee-Sample.csv');\n                document.body.appendChild(link);\n                link.click();\n                toast.success(response?.data?.message);\n            })\n            .catch((err) => {\n                toast.error(err.message);\n            });\n    }, []);\n    const handleOpenImportList = () => {\n        setUserPopup(true)\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const onHandleLocation = (e: { target: { value: React.SetStateAction<string>; }; }) => {\n        setLocationSelection(e.target.value)\n    }\n\n    const onChangeStatus = useCallback((data: EmployeeData) => {\n        setIsStatusModelShow(true)\n        setTenantObj(data)\n    }, [])\n\n    const changeCategoryStatus = useCallback(() => {\n        updateEmployeeStatus({\n            variables: {\n                subscriberUserId: tenantObj.uuid,\n            },\n        })\n            .then((res) => {\n                const data = res.data\n                toast.success(data.activeInactiveEmployee.message)\n                setIsStatusModelShow(false)\n                getEmployeeData()\n            })\n            .catch((err) => {\n                toast.error(err?.networkError?.result?.errors[0]?.message)\n            })\n    }, [isStatusModelShow])\n\n    const onCloseSubscriber = useCallback(() => {\n        setIsStatusModelShow(false)\n    }, []);\n  \n    \n\n    return (\n        <>\n            {loading && <Loader />}\n            <UpdatedHeader headerActionConst={headerActionConst} />\n            <div className='p-3 mb-3 bg-white border rounded-xl border-border-primary mx-7 md:p-5'>\n                <div className='flex flex-col flex-wrap justify-between gap-3 mb-5 md:gap-5 md:flex-row'>\n                    <h6 className='w-full leading-7 xmd:w-auto'>{t('Employee User')}</h6>\n                    <div className='flex flex-wrap gap-y-3 gap-x-4'>\n                        <button className=\"w-full btn btn-gray md:w-[260px] p-3.5\" onClick={handleOpenImportList} title={`${t('Import')}`} >Import Employees List <ImportDoc className='order-2 ml-auto ' /></button>\n\n                        <button className=\"w-full btn btn-gray md:w-[260px] p-3.5\" onClick={()=>onDownloadCsv()} title={`${t('Export')}`}>\n                            Export Employees List  <ImportDoc className='order-2 ml-auto ' />\n                        </button>\n\n                        <button className=\"btn bg-default btn-secondary btn-normal w-full md:w-[220px] \" type=\"button\" onClick={() => onDownloadSampleCsv()} title={`${t('Download')}`}>Download Sample CSV</button>\n\n                        <TextInput\n                            type='text'\n                            id='table-search'\n                            value={filterData.search}\n                            className='w-full md:w-[230px]'\n                            placeholder={t('Search')}\n                            onChange={onSearchUser}\n                            inputIcon={<Search fontSize='18' className='font-normal' />}\n                        />\n                    </div>\n                </div>\n                <div className='w-full mb-3 overflow-auto bg-white border sm:w-auto rounded-t-xl custom-dataTable border-border-primary'>\n                    <table>\n                        <thead key='sorting'>\n                            <tr>\n                                {COL_ARR_SUBSCRIBER?.map((colValUser: ColArrType, index: number) => {\n                                    return (\n                                        <th scope='col' key={`sub-${index + 1}`} className={`${colValUser.name == 'Sr.No' ? 'pl-7' : ''}`}>\n                                            <div className='flex items-center'>\n                                                {colValUser.name}\n                                                {colValUser.sortable && (\n                                                    <button onClick={() => onHandleSortUser(colValUser.fieldName)}>\n                                                        {(filterData.sortOrder === '' || filterData.sortField !== colValUser.fieldName) &&\n                                                            <GetDefaultIcon className='w-3 h-3 ml-1 fill-white' />}\n                                                        {filterData.sortOrder === 'ascend' && filterData.sortField === colValUser.fieldName &&\n                                                            <ArrowSortingUp className=\"ml-1 fill-white\" />}\n                                                        {filterData.sortOrder === 'descend' && filterData.sortField === colValUser.fieldName &&\n                                                            <ArrowSortingDown className=\"ml-1 fill-white\" />}\n                                                    </button>\n                                                )}\n                                            </div>\n                                        </th>\n                                    );\n                                })}\n\n                                <th scope='col'>\n                                    <div className='flex items-center'>{t('Action')}</div>\n                                </th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {data?.getSubscriberEmployeesUserListWithPagination?.data?.employee?.map((data: { first_name: string, last_name: string, email: string, phone_number: number, department: string, user_roles: [], uuid: string, status: number, user_branches: [{ branch: { uuid: string } }], user_type: number }, index: number) => {\n                                const displayIndex = filterData?.index as number + index + 1;\n                                const branchIdName = data?.user_branches?.map((branch: { branch: { uuid: string } }) => {\n                                    return branch?.branch?.uuid;\n                                })\n                                return (\n                                    <tr key={data?.uuid}>\n\n                                        <td scope='row' className='text-left pl-7'>\n                                            {displayIndex}\n                                        </td>\n                                        <td className='text-left'>{data.first_name}</td>\n                                        <td className='text-left'>{data.last_name}</td>\n                                        <td className='text-left'>{data.email}</td>\n                                        <td className='text-left'>{data.phone_number}</td>\n                                        <td className='text-left'>{data.department}</td>\n                                        <td className='text-left border-none'>\n                                            <div className='flex'>\n                                                {data?.status === ContractorStatus.ACTIVE ? (\n                                                    <span className='text-bright-green-shade'>\n                                                        Active\n                                                    </span>\n                                                ) : (\n                                                    <span className='text-error'>\n                                                        Inactive\n                                                    </span>\n                                                )}\n                                            </div>\n                                        </td>\n                                        {data?.user_roles?.map((userRole: { role_id: { name: string, uuid: string } }) => (\n                                            <td key={userRole?.role_id?.uuid} className='text-left'>{userRole?.role_id?.name}</td>\n                                        ))}\n                                        <td>\n                                            <div className='flex gap-2.5'>\n                                                {(subscriberUUID && employee?.read) && <Button onClick={() => onView(data.uuid, branchIdName)} label={''}><Eye className='bg-transparent text-success' /> </Button>}\n                                                {(subscriberUUID && employee?.update) && <Button className='bg-transparent btn-default' onClick={() => onEdit(data?.uuid, branchIdName, data?.user_type)} label={''}>\n                                                    <Edit />\n                                                </Button>}\n                                                {(subscriberUUID && employee?.delete) && <DeleteBtn data={data} setObj={setUserObj} setIsDelete={setIsDeleteUserEmployee} />}\n\n                                                <div className='flex justify-center'>\n                                                    {subscriberUUID && employee?.update && <span\n                                                        className='font-medium text-blue-600 hover:underline'\n                                                    >\n                                                        <label className='relative inline-flex items-center mb-0 cursor-pointer'>\n                                                            <input\n                                                                type='checkbox'\n                                                                className='sr-only peer'\n                                                                value={data?.status}\n                                                                onChange={() => onChangeStatus(data)}\n                                                                checked={data?.status === ContractorStatus.ACTIVE}\n                                                            />\n                                                            <div\n                                                                className={\n                                                                    'w-[30px] h-[14px] bg-secondary rounded-full peer peer-focus:ring-3 peer-focus:ring-red-200 peer-checked:after:translate-x-full peer-checked:after:border-white after:content- after:absolute after:top-[-1px] after:left-0 after:bg-white after:drop-shadow-outline-2 after:rounded-full after:h-4 after:w-4 after:transition-all peer-checked:bg-primary'\n                                                                }\n                                                            ></div>\n                                                        </label>\n                                                    </span>}\n                                                </div>\n                                            </div>\n                                        </td>\n                                    </tr>\n                                );\n                            })}\n                        </tbody>\n                    </table>\n                    {(data?.getSubscriberEmployeesUserListWithPagination?.data?.count === 0 ||\n                        data?.getSubscriberEmployeesUserListWithPagination?.data === null) && (\n                            <div className='flex justify-center'>\n                                <div>{t('No Data')}</div>\n                            </div>\n                        )}\n                </div>\n\n                <div className='flex flex-wrap items-center mt-2 overflow-auto gap-x-5 md:gap-x-7'>\n                    <div className='flex items-center'>\n                        <span className='text-sm font-normal text-gray-700 '>\n                            {t('Per Page')}\n                        </span>\n                        <select\n                            className='border border-border-primary rounded-xl ml-2 px-3 text-sm py-1.5 text-gray-500 w-[70px] h-[36px] appearance-none bg-white'\n                            value={filterData.limit}\n                            onChange={(e) => onPageDrpSelectUser(e.target.value)}\n                        >\n                            {SHOW_PAGE_COUNT_ARR?.map((item: number, index: number) => {\n                                return <option key={`${index + 1}`}>{item}</option>\n                            })}\n                        </select>\n                    </div>\n                    <Pagination currentPage={filterData.page}\n                        totalPages={totalPages}\n                        onPageChange={handlePageChange}\n                        recordsPerPage={recordsPerPage}\n                    />\n                </div>\n                {isDeleteUserEmployee && <CommonModel warningText={DELETE_WARNING_TEXT} onClose={onCloseUserEmployee} action={deleteUser} show={isDeleteUserEmployee} />}\n\n            </div>\n            <RejectedUserPopup\n                rejectedUserPopup={rejectedUserPopup}\n                rejectedUsersData={rejectedUsersData}\n                oncancel={oncancel} \n            />\n           \n            {userPopup && (\n                <div id='defaultModal' tabIndex={-1} data-modal-show={true} aria-hidden='false' className={`fixed top-0 left-0 right-0 z-50 h-full bg-modal modal ${userPopup ? '' : 'hidden'}`}>\n                    <div id='changeUserStatusModel' tabIndex={-1} data-modal-show={true} aria-hidden='false' className={`py-5 flex items-center justify-center h-full ${userPopup ? '' : 'opacity-0 transform -translate-y-full scale-150 '} transition-all duration-300 `}>\n                        <div className='w-full mx-5 sm:max-w-[400px]'>\n                            {/* <!-- Modal content --> */}\n                            <div className='relative bg-white rounded-xl'>\n                                {/* <!-- Modal header --> */}\n                                <div className='flex items-center justify-between px-5 py-4 border-b md:py-6 bg-accents-2 rounded-t-xl'>\n                                    <p className='text-lg font-bold md:text-xl text-baseColor'>{'Import Employees List'}</p>\n                                    <Button onClick={() => oncancel()} label='' title={`${t('Close')}`}>\n                                        <span className='text-xl-22'><Cross className='text-error' /></span>\n                                    </Button>\n                                </div>\n                                {/* <!-- Modal body --> */}\n\n                                <div className='w-full p-5'>\n                                <p className='mb-4'><b className='text-error'>Note : </b>Before you upload the list, the roles should be created</p>\n                                    <div className=\"w-full mb-5\">\n                                        <DropDown placeholder={t('Select Location')} className='w-full' label={t('Location')} inputIcon={<span className='text-xs'><DropdownArrowDown className='fill-dark-grey' /></span>} onChange={onHandleLocation} value={locationSelection} options={stateDrpData} name='branchId' id='branchId' required={true} />\n                                    </div>\n                                    \n                                    <label id='importCsv' className=\"w-full mb-0 btn btn-gray p-3.5\">\n                                        Import Employees List  <ImportDoc className='order-2 ml-auto ' /> {''}\n                                        <input\n                                            id='importCsv'\n                                            type=\"file\"\n                                            name='importCsv'\n                                            multiple\n                                            ref={fileInputRef}\n                                            className='hidden focus:bg-transparent'\n                                            accept=\".csv\"\n                                            onChange={(e) => onImportEmployeeList(e)}\n                                            key={uuidv4()}\n                                            disabled={!locationSelection}\n                                        />\n                                    </label>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            )}\n            \n            {isStatusModelShow && (\n                <CommonModel\n                    warningText={CHANGE_STATUS_WARNING_TEXT}\n                    onClose={onCloseSubscriber}\n                    action={changeCategoryStatus}\n                    show={isStatusModelShow}\n                    disabled={statusLoading?.loading}\n                    isLoading={statusLoading?.loading}\n                />\n            )}\n\n        </>\n    );\n};\nexport default EmployeeUser;\n\n"],"names":["_ref","data","setObj","setIsDelete","className","customClick","deleteData","useCallback","_jsx","Button","concat","onClick","label","title","children","Trash","DELETE_EMPLOYEE_USER","gql","_templateObject","_taggedTemplateLiteral","DELETE_TENANT_COMPANY","_templateObject2","DELETE_CONTRACTOR_COMPANY","_templateObject3","FETCH_EMPLOYEE_USER_LIST","FETCH_TENANT_COMPANY_LIST","EmployeeUser","_data$getSubscriberEm","_data$getSubscriberEm2","_userProfileData$getP","_userProfileData$getP2","_userProfileData$getP3","_data$getSubscriberEm3","_data$getSubscriberEm4","_data$getSubscriberEm5","_data$getSubscriberEm6","_data$getSubscriberEm7","_data$getSubscriberEm8","t","useTranslation","navigate","useNavigate","deleteEmployeeById","useMutation","isDeleteUserEmployee","setIsDeleteUserEmployee","useState","userObj","setUserObj","loading","setLoading","encryptedToken","localStorage","getItem","token","DecryptionFunction","fileInputRef","useRef","rejectedUserPopup","setRejectedUserPopup","dispatch","useDispatch","rejectedUsersData","setRejectedUsersData","successCount","rejectCount","totalCount","rejectedUsers","filterData","setFilterData","limit","PAGE_LIMIT","page","PAGE_NUMBER","sortOrder","search","sortField","index","locationSelection","setLocationSelection","recordsPerPage","setRecordsPerPage","employee","useSelector","state","rolesManagement","userProfileData","userProfile","stateDrpData","setStateDrpData","isStatusModelShow","setIsStatusModelShow","tenantObj","setTenantObj","updateEmployeeStatus","statusLoading","CHANGE_EMPLOYEE_STATUS","COL_ARR_SUBSCRIBER","name","sortable","fieldName","subscriberLocation","useQuery","SUBSCRIBER_LOCATION","variables","companyId","refetch","getEmployeeData","onCloseUserEmployee","handleAddUser","setCreateNewAccountStep","ROUTES","app","createNewAccount","useEffect","subscriberLocations","_subscriberLocation$s","_subscriberLocation$s2","tempDataArr","map","push","location","key","uuid","totalUser","getSubscriberEmployeesUserListWithPagination","count","totalPages","Math","ceil","handlePageChange","newPage","updatedFilterData","filterServiceProps","saveState","JSON","stringify","deleteUser","subscriberUserId","userData","user_type","then","res","toast","success","deleteSubscriberEmployeeUser","message","catch","error","err","_err$networkError","_err$networkError$res","networkError","result","errors","onSearchUser","e","target","value","subscriberUUID","getProfile","subscriber_id","onEdit","branchIdName","userType","userDetails","onView","userPopup","setUserPopup","oncancel","onDownloadCsv","axios","get","API_BASE_URL","headers","authorization","responseType","response","_response$data","url","window","URL","createObjectURL","Blob","link","document","createElement","href","setAttribute","body","appendChild","click","onImportEmployeeList","async","files","event","currentTarget","importEmployeeList","branchId","onImportCallBack","employeeType","current","onDownloadSampleCsv","_response$data2","onChangeStatus","changeCategoryStatus","activeInactiveEmployee","_err$networkError2","_err$networkError2$re","_err$networkError2$re2","onCloseSubscriber","_jsxs","_Fragment","Loader","UpdatedHeader","headerActionConst","write","type","handleOpenImportList","ImportDoc","TextInput","id","placeholder","onChange","inputIcon","Search","fontSize","colValUser","scope","onHandleSortUser","sortFieldName","GetDefaultIcon","ArrowSortingUp","ArrowSortingDown","_data$user_branches","_data$user_roles","displayIndex","user_branches","branch","_branch$branch","first_name","last_name","email","phone_number","department","status","ContractorStatus","ACTIVE","user_roles","userRole","_userRole$role_id","_userRole$role_id2","role_id","read","Eye","update","Edit","delete","DeleteBtn","checked","Number","parseInt","onPageDrpSelectUser","SHOW_PAGE_COUNT_ARR","item","Pagination","currentPage","onPageChange","CommonModel","warningText","DELETE_WARNING_TEXT","onClose","action","show","RejectedUserPopup","tabIndex","Cross","DropDown","DropdownArrowDown","options","required","multiple","ref","accept","disabled","uuidv4","CHANGE_STATUS_WARNING_TEXT","isLoading"],"sourceRoot":""}