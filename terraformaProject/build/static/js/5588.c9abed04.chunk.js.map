{"version":3,"file":"static/js/5588.c9abed04.chunk.js","mappings":"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","sources":["components/customHooks/useTranslationFormErrors.tsx","framework/graphql/mutations/couponManagement.ts","framework/graphql/queries/couponManagement.ts","views/couponsManagement/addEditCoupons.tsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { FormikErrors, FormikTouched, FormikValues } from 'formik';\n\nexport const useTranslateFormErrors = (errors: FormikErrors<FormikValues>, touched: FormikTouched<FormikValues>, setFieldTouched: (field: string, touched?: boolean, shouldValidate?: boolean) => Promise<FormikErrors<FormikValues>> | Promise<void>) => {\n\tconst { i18n } = useTranslation();\n\tuseEffect(() => {\n\t\ti18n.on('languageChanged', () => {\n\t\t\tObject.keys(errors).forEach((fieldName) => {\n\t\t\t\tif (Object.keys(touched).includes(fieldName)) {\n\t\t\t\t\tsetFieldTouched(fieldName);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t\treturn () => {\n\t\t\ti18n.off('languageChanged', () => {\n\t\t\t\treturn;\n\t\t\t});\n\t\t};\n\t}, [errors]);\n};\n\nconst WithTranslateFormErrors = ({ errors, touched, setFieldTouched, children }: { errors: FormikErrors<FormikValues>; touched: FormikTouched<FormikValues>; setFieldTouched: (field: string, touched?: boolean, shouldValidate?: boolean) => Promise<FormikErrors<FormikValues>> | Promise<void>; children: React.ReactNode }) => {\n\tuseTranslateFormErrors(errors, touched, setFieldTouched);\n\treturn <>{children}</>;\n};\n\nexport default WithTranslateFormErrors;\n","import { gql } from '@apollo/client';\n\nexport const DELETE_COUPON_BY_ID = gql`\n  mutation Mutation($deleteCouponId: Int) {\n    deleteCoupon(id: $deleteCouponId) {\n      data {\n        id\n        uuid\n        coupon_name\n        coupon_code\n        coupon_type\n        percentage\n        start_time\n        expire_time\n        applicable\n        total_usage\n        status\n        created_by\n        created_at\n        updated_at\n      }\n      meta {\n        message\n        messageCode\n        statusCode\n        status\n        type\n        errors {\n          errorField\n          error\n        }\n        errorType\n      }\n    }\n  }\n`;\n\nexport const COUPON_STATUS_CHANGE_BY_ID = gql`\n  mutation UpdateCouponStatus($updateCouponStatusId: Int!, $status: Int) {\n    updateCouponStatus(id: $updateCouponStatusId, status: $status) {\n      data {\n        id\n        uuid\n        coupon_name\n        coupon_code\n        coupon_type\n        percentage\n        start_time\n        expire_time\n        applicable\n        total_usage\n        status\n        created_by\n        created_at\n        updated_at\n      }\n      meta {\n        message\n        messageCode\n        statusCode\n        status\n        type\n        errors {\n          errorField\n          error\n        }\n        errorType\n      }\n    }\n  }\n`;\nexport const UPDATE_COUPON = gql`\n  mutation Mutation(\n    $updateCouponId: Int\n    $couponName: String\n    $couponCode: String\n    $couponType: Int\n    $percentage: Float\n    $startTime: Date\n    $expireTime: Date\n    $isReusable: Int\n    $applicable: Int\n    $selectedUsers: [Int]\n  ) {\n    updateCoupon(\n      id: $updateCouponId\n      coupon_name: $couponName\n      coupon_code: $couponCode\n      coupon_type: $couponType\n      percentage: $percentage\n      start_time: $startTime\n      expire_time: $expireTime\n      is_reusable: $isReusable\n      applicable: $applicable\n      selected_users: $selectedUsers\n    ) {\n      data {\n        id\n        uuid\n        coupon_name\n        coupon_code\n        coupon_type\n        percentage\n        start_time\n        expire_time\n        applicable\n        is_reusable\n        selected_users\n\n        created_by\n        created_at\n        updated_at\n      }\n      meta {\n        message\n        messageCode\n        statusCode\n        status\n        type\n        errors {\n          errorField\n          error\n        }\n        errorType\n      }\n    }\n  }\n`;\nexport const CREATE_COUPON = gql`\n  mutation Mutation(\n    $couponName: String\n    $couponCode: String\n    $couponType: Int\n    $percentage: Float\n    $startTime: Date\n    $expireTime: Date\n    $applicable: Int\n    $status: Int\n    $createdBy: Int\n    $selectedUsers: [Int]\n    $isReusable: Int\n  ) {\n    createCoupon(\n      coupon_name: $couponName\n      coupon_code: $couponCode\n      coupon_type: $couponType\n      percentage: $percentage\n      start_time: $startTime\n      expire_time: $expireTime\n      applicable: $applicable\n      status: $status\n      created_by: $createdBy\n      selected_users: $selectedUsers\n      is_reusable: $isReusable\n    ) {\n      data {\n        id\n        uuid\n        coupon_name\n        coupon_code\n        coupon_type\n        percentage\n        start_time\n        expire_time\n        applicable\n        status\n        created_by\n        created_at\n        updated_at\n      }\n      meta {\n        message\n        messageCode\n        statusCode\n        status\n        type\n        errors {\n          errorField\n          error\n        }\n        errorType\n      }\n    }\n  }\n`;\n\nexport const GROUP_DELETE_COUPON = gql` mutation GroupDeleteCoupons($groupDeleteCouponsId: [Int]) {\n  groupDeleteCoupons(id: $groupDeleteCouponsId) {\n    meta {\n      message\n      messageCode\n      statusCode\n      status\n      type\n      errors {\n        errorField\n        error\n      }\n      errorType\n    }\n  }\n}`;","import { gql } from '@apollo/client';\n\nexport const FETCH_COUPONS = gql`\n  query FetchCoupons(\n    $page: Int\n    $limit: Int\n    $sortBy: String\n    $sortOrder: String\n    $couponName: String\n    $startTime: Date\n    $expireTime: Date\n    $status: Int\n  ) {\n    fetchCoupons(\n      page: $page\n      limit: $limit\n      sortBy: $sortBy\n      sortOrder: $sortOrder\n      coupon_name: $couponName\n      start_time: $startTime\n      expire_time: $expireTime\n      status: $status\n    ) {\n      data {\n        Coupondata {\n          id\n          uuid\n          coupon_name\n          coupon_code\n          coupon_type\n          percentage\n          start_time\n          expire_time\n          applicable\n          is_reusable\n          total_usage\n          selected_users\n          status\n          created_by\n          created_at\n          updated_at\n        }\n        count\n      }\n      meta {\n        message\n        messageCode\n        statusCode\n        status\n        type\n        errors {\n          errorField\n          error\n        }\n        errorType\n      }\n    }\n  }\n`;\nexport const GET_COUPON_BY_ID = gql`\n  query GetSingleCoupon($getSingleCouponId: Int) {\n    getSingleCoupon(id: $getSingleCouponId) {\n      data {\n        coupon {\n          id\n          uuid\n          coupon_name\n          coupon_code\n          coupon_type\n          percentage\n          start_time\n          expire_time\n          applicable\n          is_reusable\n          total_usage\n          selected_users\n          status\n          created_by\n          created_at\n          updated_at\n        }\n        userList {\n          id\n          uuid\n          first_name\n          middle_name\n          last_name\n          user_name\n          email\n          gender\n          date_of_birth\n          phone_no\n          phone_country_id\n          role\n          profile_img\n          device_type\n          status\n          user_role_id\n          created_at\n          updated_at\n        }\n      }\n      meta {\n        message\n        messageCode\n        statusCode\n        status\n        type\n        errors {\n          errorField\n          error\n        }\n        errorType\n      }\n    }\n  }\n`;\n","import { useMutation, useQuery } from '@apollo/client';\nimport { DATE_FORMAT, ROUTES } from '@config/constant';\nimport { CreateCoupon, GetSingleCoupon, UpdateCoupon, UserData, CoponUserData } from '@framework/graphql/graphql';\nimport { CREATE_COUPON, UPDATE_COUPON } from '@framework/graphql/mutations/couponManagement';\nimport { GET_COUPON_BY_ID } from '@framework/graphql/queries/couponManagement';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { CreateUpdateCouponProps, UsersDataStructureType } from 'src/types/couponManagement';\nimport useValidation from '@framework/hooks/validations';\nimport { useFormik } from 'formik';\nimport TextInput from '@components/textInput/TextInput';\nimport { GET_USERS_LIST } from '@framework/graphql/queries/user';\nimport Button from '@components/button/button';\nimport { CheckCircle, Cross } from '@components/icons/icons';\nimport RadioButtonNew from '@components/radiobutton/radioButtonNew';\nimport { getDateFormat, whiteSpaceRemover } from '@utils/helpers';\nimport moment from 'moment';\nimport { MultiSelect, MultiSelectChangeEvent } from 'primereact/multiselect';\nimport 'primereact/resources/themes/lara-light-indigo/theme.css'; // theme\nimport 'primereact/resources/primereact.css';\nimport WithTranslateFormErrors from '@components/customHooks/useTranslationFormErrors';\nconst AddEditCoupons = () => {\n\tconst { t } = useTranslation();\n\tconst navigate = useNavigate();\n\tconst CouponId = useParams();\n\tconst { data: userData } = useQuery(GET_USERS_LIST);\n\tconst { data: CouponData, refetch } = useQuery(GET_COUPON_BY_ID);\n\tconst [createCoupon] = useMutation(CREATE_COUPON);\n\tconst [updateCoupon] = useMutation(UPDATE_COUPON);\n\tconst { addCoupenValidationSchema } = useValidation();\n\tconst initialValues: CreateUpdateCouponProps = {\n\t\tcouponName: '',\n\t\tcouponCode: '',\n\t\tstartTime: '',\n\t\texpireTime: '',\n\t\tpercentage: 0,\n\t\tradio: '',\n\t\tcouponType: '0',\n\t\tisReusable: '',\n\t\tapplicable: '',\n\t};\n\tconst [options, setOptions] = useState<UsersDataStructureType[]>([]);\n\tconst [selected, setSelected] = useState<UsersDataStructureType[]>([]);\n\t/**\n\t * Method used for get coupon api with id\n\t */\n\tuseEffect(() => {\n\t\tif (CouponId?.id) {\n\t\t\trefetch({ getSingleCouponId: parseInt(CouponId.id) }).catch((err) => {\n\t\t\t\ttoast.error(err);\n\t\t\t});\n\t\t}\n\t}, [CouponId?.id]);\n\t//update coupon function\n\tfunction UpdateCoupon(variables: CreateUpdateCouponProps, id: number) {\n\t\tif (selected.length !== 0) {\n\t\t\tupdateCoupon({\n\t\t\t\tvariables: {\n\t\t\t\t\tupdateCouponId: id,\n\t\t\t\t\t...variables,\n\t\t\t\t},\n\t\t\t})\n\t\t\t\t.then((res) => {\n\t\t\t\t\tconst data = res.data as UpdateCoupon;\n\t\t\t\t\tif (data.updateCoupon.meta.statusCode === 200) {\n\t\t\t\t\t\ttoast.success(data.updateCoupon.meta.message);\n\n\t\t\t\t\t\tnavigate(`/${ROUTES.app}/${ROUTES.manageOffer}/list`);\n\t\t\t\t\t\tformik.resetForm();\n\t\t\t\t\t\tonCancel();\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttoast.error(data.updateCoupon.meta.message);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.catch(() => {\n\t\t\t\t\ttoast.error(t('Failed to update'));\n\t\t\t\t});\n\t\t}\n\t}\n\t// create coupon function\n\tfunction CreateCoupon(variables: CreateUpdateCouponProps) {\n\t\tif (selected.length !== 0) {\n\t\t\tcreateCoupon({\n\t\t\t\tvariables: {\n\t\t\t\t\t...variables,\n\t\t\t\t\tcreatedBy: 1,\n\t\t\t\t},\n\t\t\t})\n\t\t\t\t.then((res) => {\n\t\t\t\t\tconst data = res.data as CreateCoupon;\n\t\t\t\t\tif (data.createCoupon.meta.statusCode === 200 || data.createCoupon.meta.statusCode === 201) {\n\t\t\t\t\t\ttoast.success(data.createCoupon.meta.message);\n\t\t\t\t\t\tnavigate(`/${ROUTES.app}/${ROUTES.manageOffer}/list`);\n\t\t\t\t\t\tformik.resetForm();\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttoast.error(data.createCoupon.meta.message);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.catch(() => {\n\t\t\t\t\ttoast.error(t('Failed to create'));\n\t\t\t\t});\n\t\t}\n\t}\n\t/**setCouponType\n\t * Method used for setvalue from coupon data by id selectedUsers\n\t */\n\tuseEffect(() => {\n\t\tif (CouponData?.getSingleCoupon && CouponId.id) {\n\t\t\tconst data = CouponData?.getSingleCoupon?.data as GetSingleCoupon;\n\t\t\tsetSelected(\n\t\t\t\tdata?.userList.map((i: UserData) => {\n\t\t\t\t\treturn { name: i.first_name, code: i.id };\n\t\t\t\t})\n\t\t\t);\n\t\t\tformik\n\t\t\t\t.setValues({\n\t\t\t\t\tcouponName: data?.coupon?.coupon_name,\n\t\t\t\t\tcouponCode: data?.coupon?.coupon_code,\n\t\t\t\t\tstartTime: getDateFormat(data?.coupon?.start_time, DATE_FORMAT.simpleDateFormat),\n\t\t\t\t\texpireTime: getDateFormat(data?.coupon?.expire_time, DATE_FORMAT.simpleDateFormat),\n\t\t\t\t\tpercentage: data?.coupon?.percentage,\n\t\t\t\t\tcouponType: JSON.stringify(data?.coupon?.coupon_type),\n\t\t\t\t\tisReusable: JSON.stringify(data?.coupon?.is_reusable),\n\t\t\t\t\tapplicable: JSON.stringify(data?.coupon?.applicable),\n\t\t\t\t})\n\t\t\t\t.catch((err) => {\n\t\t\t\t\ttoast.error(err);\n\t\t\t\t});\n\t\t}\n\t}, [CouponData?.getSingleCoupon]);\n\n\tconst formik = useFormik({\n\t\tinitialValues,\n\t\tvalidationSchema: addCoupenValidationSchema,\n\t\tonSubmit: (values) => {\n\t\t\tconst variables = {\n\t\t\t\tcouponName: values.couponName,\n\t\t\t\tcouponCode: values.couponCode,\n\t\t\t\tcouponType: values.couponType === '0' ? 0 : 1,\n\t\t\t\tstartTime: values.startTime,\n\t\t\t\texpireTime: values.expireTime,\n\t\t\t\tpercentage: values.percentage,\n\t\t\t\tapplicable: values.applicable === '0' ? 0 : 1,\n\t\t\t\tselectedUsers: selected.map((i) => i.code),\n\t\t\t\tisReusable: values.isReusable === '0' ? 0 : 1,\n\t\t\t};\n\n\t\t\tCouponId.id ? UpdateCoupon(variables, +CouponId.id) : CreateCoupon(variables);\n\t\t},\n\t});\n\t/**\n\t * on clicking cancel it will redirect to main events page\n\t */\n\tconst onCancel = useCallback(() => {\n\t\tnavigate(`/${ROUTES.app}/${ROUTES.manageOffer}/list`);\n\t}, []);\n\n\tuseEffect(() => {\n\t\tif (userData?.getUsers) {\n\t\t\tconst data = userData?.getUsers?.data as CoponUserData;\n\t\t\tsetOptions(\n\t\t\t\tdata?.userList.map((i: UserData) => {\n\t\t\t\t\treturn { name: i.first_name, code: i.id };\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t\tif (formik.values.applicable === '0' && userData?.getUsers) {\n\t\t\tconst data = userData?.getUsers?.data as CoponUserData;\n\t\t\tsetSelected(\n\t\t\t\tdata?.userList.map((i: UserData) => {\n\t\t\t\t\treturn { name: i.first_name, code: i.id };\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t}, [formik.values.applicable]);\n\n\tconst getErrorCoupon = (fieldName: keyof CreateUpdateCouponProps) => {\n\t\treturn formik.errors[fieldName] && formik.touched[fieldName] ? formik.errors[fieldName] : '';\n\t};\n\tconst OnChangeCpnAdEd = useCallback(\n\t\t(e: MultiSelectChangeEvent) => {\n\t\t\tsetSelected(e.value);\n\t\t},\n\t\t[setSelected]\n\t);\n\tconst OnBlurCpn = useCallback((e: React.FocusEvent<HTMLInputElement> | React.FocusEvent<HTMLTextAreaElement> | React.ChangeEvent<HTMLInputElement>) => {\n\t\tformik.setFieldValue(e.target.name, whiteSpaceRemover(e));\n\t}, []);\n\n\treturn (\n\t\t<div>\n\t\t\t<div className='w-full '>\n\t\t\t\t<WithTranslateFormErrors errors={formik.errors} touched={formik.touched} setFieldTouched={formik.setFieldTouched}>\n\t\t\t\t\t<form className='bg-white shadow-md rounded  pt-6 mb-4 border border-[#c8ced3]' onSubmit={formik.handleSubmit}>\n\t\t\t\t\t\t<div className='flex justify-end pr-8 pb-2'>\n\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t{t('Fields marked with')} <span className='text-red-500'>*</span> {t('are mandatory.')}\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className='grid grid-cols-1 px-8 md:grid-cols-2  gap-4'>\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<TextInput required={true} placeholder={t('Offer Name')} name='couponName' onChange={formik.handleChange} onBlur={OnBlurCpn} label={t('Offer Name')} value={formik.values.couponName} error={getErrorCoupon('couponName')} />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<TextInput required={true} placeholder={t('Offer Code')} name='couponCode' onChange={formik.handleChange} onBlur={OnBlurCpn} label={t('Offer Code')} value={formik.values.couponCode} error={getErrorCoupon('couponCode')} />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<RadioButtonNew\n\t\t\t\t\t\t\t\t\tid={'couponType'}\n\t\t\t\t\t\t\t\t\tchecked={formik.values.couponType}\n\t\t\t\t\t\t\t\t\tonChange={formik.handleChange}\n\t\t\t\t\t\t\t\t\tname={'couponType'}\n\t\t\t\t\t\t\t\t\tradioOptions={[\n\t\t\t\t\t\t\t\t\t\t{ name: t('Percentage'), key: 0 },\n\t\t\t\t\t\t\t\t\t\t{ name: t('Amount'), key: 1 },\n\t\t\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t\t\t\tlabel={t('Type')}\n\t\t\t\t\t\t\t\t\trequired={true}\n\t\t\t\t\t\t\t\t\terror={formik.errors.couponType && formik.touched.couponType ? formik.errors.couponType : ''}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<TextInput type='number' placeholder={t('Value')} name='percentage' onChange={formik.handleChange} label={formik.values.couponType === '0' ? `${t('Value')}(%)` : t('Value')} value={formik.values.percentage} error={getErrorCoupon('percentage')} />\n\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<TextInput required={true} type='date' placeholder={t('start Date')} name='startTime' onChange={formik.handleChange} label={t('Start Date')} value={formik.values.startTime} error={getErrorCoupon('startTime')} min={CouponId.id ? formik.values.startTime : moment().format(DATE_FORMAT.simpleDateFormat)} disabled={!!CouponId.id} />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<TextInput required={true} type='date' placeholder={t('End Date')} disabled={!formik.values.startTime} name='expireTime' onChange={formik.handleChange} label={t('End Date')} value={formik.values.expireTime} error={formik.values.startTime && getErrorCoupon('expireTime')} min={formik.values.startTime} />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className='mb-4'>\n\t\t\t\t\t\t\t\t<RadioButtonNew\n\t\t\t\t\t\t\t\t\tid='isReusable'\n\t\t\t\t\t\t\t\t\trequired={true}\n\t\t\t\t\t\t\t\t\tchecked={formik.values.isReusable === '' ? '2' : formik.values.isReusable}\n\t\t\t\t\t\t\t\t\tonChange={formik.handleChange}\n\t\t\t\t\t\t\t\t\tname={'isReusable'}\n\t\t\t\t\t\t\t\t\tradioOptions={[\n\t\t\t\t\t\t\t\t\t\t{ name: t('One Time'), key: 0 },\n\t\t\t\t\t\t\t\t\t\t{ name: t('Multiple Time'), key: 1 },\n\t\t\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t\t\t\tlabel={t('Usage')}\n\t\t\t\t\t\t\t\t\terror={getErrorCoupon('isReusable')}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<RadioButtonNew\n\t\t\t\t\t\t\t\t\tid='applicable'\n\t\t\t\t\t\t\t\t\trequired={true}\n\t\t\t\t\t\t\t\t\tchecked={formik.values.applicable === '' ? '2' : formik.values.applicable}\n\t\t\t\t\t\t\t\t\tonChange={formik.handleChange}\n\t\t\t\t\t\t\t\t\tname={'applicable'}\n\t\t\t\t\t\t\t\t\tradioOptions={[\n\t\t\t\t\t\t\t\t\t\t{ name: t('All'), key: 0 },\n\t\t\t\t\t\t\t\t\t\t{ name: t('Selected users'), key: 1 },\n\t\t\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t\t\t\tlabel={t('Applicable')}\n\t\t\t\t\t\t\t\t\terror={getErrorCoupon('applicable')}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t{formik.values.applicable === '1' && (\n\t\t\t\t\t\t\t\t<div className='mb-4'>\n\t\t\t\t\t\t\t\t\t<label htmlFor='selectedUsers' className='ml-1 text-gray-700'>\n\t\t\t\t\t\t\t\t\t\t{t('Selected users')} <span className='text-red-500  '>*</span>\n\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t<div className='mt-3'>\n\t\t\t\t\t\t\t\t\t\t<MultiSelect value={selected} onChange={OnChangeCpnAdEd} options={options} optionLabel='name' display='chip' placeholder={`${t('Select user')}`} maxSelectedLabels={3} className='w-full md:w-20rem ' />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t{formik.values.applicable === '1' && formik.touched.applicable && selected?.length === 0 && <p className='text-red-500'>{t('Please select alteast one user')}</p>}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className='btn-group col-span-3 flex items-center py-3 px-5 justify-start bg-slate-100   border border-[#c8ced3]'>\n\t\t\t\t\t\t\t<Button className='btn-primary btn-normal' type='submit' label={CouponId?.id ? t('Update') : t('Save')} \n\t\t\t\t\t\t\ttitle={`${CouponId?.id ? t('Update') : t('Save')}`} >\n\t\t\t\t\t\t\t\t<CheckCircle className='mr-1 text-white ' />\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t<Button className='btn-warning btn-normal' label={t('Cancel')} onClick={onCancel} title={`${t('Cancel')}`} >\n\t\t\t\t\t\t\t\t<Cross className='mr-1 fill-white' />\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</form>\n\t\t\t\t</WithTranslateFormErrors>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\nexport default AddEditCoupons;\n"],"names":["_ref","errors","touched","setFieldTouched","children","useTranslateFormErrors","i18n","useTranslation","useEffect","on","Object","keys","forEach","fieldName","includes","off","_jsx","_Fragment","DELETE_COUPON_BY_ID","gql","_templateObject","_taggedTemplateLiteral","COUPON_STATUS_CHANGE_BY_ID","_templateObject2","UPDATE_COUPON","_templateObject3","CREATE_COUPON","_templateObject4","GROUP_DELETE_COUPON","_templateObject5","FETCH_COUPONS","GET_COUPON_BY_ID","AddEditCoupons","t","navigate","useNavigate","CouponId","useParams","data","userData","useQuery","GET_USERS_LIST","CouponData","refetch","createCoupon","useMutation","updateCoupon","addCoupenValidationSchema","useValidation","options","setOptions","useState","selected","setSelected","id","getSingleCouponId","parseInt","catch","err","toast","error","getSingleCoupon","_CouponData$getSingle","_data$coupon","_data$coupon2","_data$coupon3","_data$coupon4","_data$coupon5","_data$coupon6","_data$coupon7","_data$coupon8","userList","map","i","name","first_name","code","formik","setValues","couponName","coupon","coupon_name","couponCode","coupon_code","startTime","getDateFormat","start_time","DATE_FORMAT","simpleDateFormat","expireTime","expire_time","percentage","couponType","JSON","stringify","coupon_type","isReusable","is_reusable","applicable","useFormik","initialValues","radio","validationSchema","onSubmit","values","variables","selectedUsers","length","updateCouponId","then","res","meta","statusCode","success","message","concat","ROUTES","app","manageOffer","resetForm","onCancel","UpdateCoupon","createdBy","CreateCoupon","useCallback","getUsers","_userData$getUsers","_userData$getUsers2","getErrorCoupon","OnChangeCpnAdEd","e","value","OnBlurCpn","setFieldValue","target","whiteSpaceRemover","className","WithTranslateFormErrors","_jsxs","handleSubmit","TextInput","required","placeholder","onChange","handleChange","onBlur","label","RadioButtonNew","checked","radioOptions","key","type","min","moment","format","disabled","htmlFor","MultiSelect","optionLabel","display","maxSelectedLabels","Button","title","CheckCircle","onClick","Cross"],"sourceRoot":""}