{"version":3,"file":"static/js/8647.d3980e3b.chunk.js","mappings":"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","sources":["components/customHooks/useTranslationFormErrors.tsx","framework/graphql/mutations/event.ts","framework/graphql/queries/event.ts","views/eventsManagement/addEditEvent.tsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { FormikErrors, FormikTouched, FormikValues } from 'formik';\n\nexport const useTranslateFormErrors = (errors: FormikErrors<FormikValues>, touched: FormikTouched<FormikValues>, setFieldTouched: (field: string, touched?: boolean, shouldValidate?: boolean) => Promise<FormikErrors<FormikValues>> | Promise<void>) => {\n\tconst { i18n } = useTranslation();\n\tuseEffect(() => {\n\t\ti18n.on('languageChanged', () => {\n\t\t\tObject.keys(errors).forEach((fieldName) => {\n\t\t\t\tif (Object.keys(touched).includes(fieldName)) {\n\t\t\t\t\tsetFieldTouched(fieldName);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t\treturn () => {\n\t\t\ti18n.off('languageChanged', () => {\n\t\t\t\treturn;\n\t\t\t});\n\t\t};\n\t}, [errors]);\n};\n\nconst WithTranslateFormErrors = ({ errors, touched, setFieldTouched, children }: { errors: FormikErrors<FormikValues>; touched: FormikTouched<FormikValues>; setFieldTouched: (field: string, touched?: boolean, shouldValidate?: boolean) => Promise<FormikErrors<FormikValues>> | Promise<void>; children: React.ReactNode }) => {\n\tuseTranslateFormErrors(errors, touched, setFieldTouched);\n\treturn <>{children}</>;\n};\n\nexport default WithTranslateFormErrors;\n","import { gql } from '@apollo/client';\n\nexport const DELETE_EVENT = gql`\nmutation DeleteEvent($deleteEventId: Int) {\n  deleteEvent(id: $deleteEventId) {\n    meta {\n      message\n      messageCode\n      statusCode\n      status\n      type\n      errors {\n        errorField\n        error\n      }\n      errorType\n    }\n  }\n}\n`;\nexport const UPDATE_EVENT = gql`\n  mutation UpdateEvent(\n    $updateEventId: Int\n    $eventName: String\n    $description: String\n    $sendNotification: Boolean\n    $address: String\n    $startDate: Date\n    $endDate: Date\n    $isRecurring: String\n    $recurrenceDate: Date\n    $participantMailIds: [String]\n  ) {\n    updateEvent(\n      id: $updateEventId\n      event_name: $eventName\n      description: $description\n      send_notification: $sendNotification\n      address: $address\n      start_date: $startDate\n      end_date: $endDate\n      is_reccuring: $isRecurring\n      reccurance_date: $recurrenceDate\n      participant_mail_ids: $participantMailIds\n    ) {\n      meta {\n        message\n        messageCode\n        statusCode\n        status\n      }\n    }\n  }\n`;\nexport const CREATE_EVENT = gql`\n  mutation CreateEvent(\n    $eventName: String\n    $description: String\n    $sendNotification: Boolean\n    $address: String\n    $startDate: Date\n    $endDate: Date\n    $isRecurring: String\n    $recurrenceDate: Date\n  ) {\n    createEvent(\n      event_name: $eventName\n      description: $description\n      send_notification: $sendNotification\n      address: $address\n      start_date: $startDate\n      end_date: $endDate\n      is_reccuring: $isRecurring\n      reccurance_date: $recurrenceDate\n    ) {\n      meta {\n        message\n        messageCode\n        statusCode\n        status\n      }\n    }\n  }\n`;\nexport const GROUP_DELETE_EVENTS = gql`mutation GroupDeleteEvents($groupDeleteEventsId: [Int]) {\n  groupDeleteEvents(id: $groupDeleteEventsId) {\n    meta {\n      message\n      messageCode\n      statusCode\n      status\n      type\n      errors {\n        errorField\n        error\n      }\n      errorType\n    }\n  }\n}`;\n","import { gql } from '@apollo/client';\n\nexport const GET_EVENTS = gql`\n  query FetchEvents(\n    $page: Int\n    $limit: Int\n    $sortBy: String\n    $sortOrder: String\n    $eventName: String\n    $startDate: Date\n    $endDate: Date\n    $createdBy: Int\n  ) {\n    fetchEvents(\n      page: $page\n      limit: $limit\n      sortBy: $sortBy\n      sortOrder: $sortOrder\n      event_name: $eventName\n      start_date: $startDate\n      end_date: $endDate\n      created_by: $createdBy\n    ) {\n      data {\n        FetchEventData {\n          id\n          event_name\n          description\n          is_reccuring\n          start_date\n          end_date\n          User {\n            user_name\n          }\n        }\n        count\n      }\n      meta {\n        message\n        messageCode\n        statusCode\n        status\n      }\n    }\n  }\n`;\nexport const GET_EVENT_BY_ID = gql`\nquery FetchEvent($fetchEventId: ID) {\n  fetchEvent(id: $fetchEventId) {\n    data {\n      id\n      uuid\n      event_name\n      description\n      email\n      address\n      is_reccuring\n      send_notification\n      start_date\n      end_date\n      status\n      participant_mail_ids\n      reccurance_date\n      created_at\n      updated_at\n      created_by\n    }\n    meta {\n      message\n      messageCode\n      statusCode\n      status\n      type\n      errors {\n        errorField\n        error\n      }\n      errorType\n    }\n  }\n}\n`;\nexport const GET_DROPDOWNFILTER_DATA = gql`\n  query FetchEvents(\n    $createdBy: Int\n    $startDate: Date\n    $endDate: Date\n    $eventName: String\n    $sortOrder: String\n    $sortBy: String\n    $limit: Int\n    $page: Int\n  ) {\n    fetchEvents(\n      created_by: $createdBy\n      start_date: $startDate\n      end_date: $endDate\n      event_name: $eventName\n      sortOrder: $sortOrder\n      sortBy: $sortBy\n      limit: $limit\n      page: $page\n    ) {\n      data {\n        FetchEventData {\n          event_name\n          start_date\n          end_date\n          created_by\n          User {\n            user_name\n          }\n        }\n        count\n      }\n      meta {\n        message\n        messageCode\n        statusCode\n        status\n        type\n      }\n    }\n  }\n`;\nexport const VIEW_EVENT = gql`\n  query FetchEvent($fetchEventId: ID) {\n    fetchEvent(id: $fetchEventId) {\n      data {\n        id\n        event_name\n        description\n        email\n        is_reccuring\n        start_date\n        end_date\n      }\n      meta {\n        message\n        messageCode\n        statusCode\n        status\n      }\n    }\n  }\n`;\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { toast } from 'react-toastify';\nimport { useTranslation } from 'react-i18next';\nimport { useNavigate, useParams } from 'react-router-dom';\n\nimport { DATE_FORMAT, ROUTES } from '@config/constant';\nimport Button from '@components/button/button';\nimport { CheckCircle, Cross } from '@components/icons/icons';\nimport RadioButtonNew from '@components/radiobutton/radioButtonNew';\nimport TextInput from '@components/textInput/TextInput';\nimport WithTranslateFormErrors from '@components/customHooks/useTranslationFormErrors';\nimport { GET_EVENT_BY_ID } from '@framework/graphql/queries/event';\nimport { CREATE_EVENT, UPDATE_EVENT } from '@framework/graphql/mutations/event';\nimport { CreateEventRes, SingleEventDataArr, UpdateEventRes } from '@framework/graphql/graphql';\nimport useValidation from '@framework/hooks/validations';\nimport { CreateEvent } from 'src/types/event';\nimport { getDateFormat, whiteSpaceRemover } from '@utils/helpers';\n\nimport moment from 'moment';\nimport { useFormik } from 'formik';\nimport { useMutation, useQuery } from '@apollo/client';\n\nconst EditEvent = () => {\n\tconst { t } = useTranslation();\n\tconst { data: EventData, refetch } = useQuery(GET_EVENT_BY_ID);\n\tconst [createEvent] = useMutation(CREATE_EVENT);\n\tconst [updateEvent] = useMutation(UPDATE_EVENT);\n\tconst navigate = useNavigate();\n\tconst updateEventId = useParams();\n\tconst { addEventValidationSchema } = useValidation();\n\t/**\n\t * value for send notification\n\t */\n\tconst [toggleEvents, setToggleEvents] = useState<boolean>(false);\n\n\tconst initialValues: CreateEvent = updateEventId.id\n\t\t? {\n\t\t\t\teventName: '',\n\t\t\t\tdescription: '',\n\t\t\t\tsendNotification: false,\n\t\t\t\taddress: '',\n\t\t\t\tstartDate: '',\n\t\t\t\tendDate: '',\n\t\t\t\tisRecurring: '0',\n\t\t\t\trecurrenceDate: '',\n\t\t\t\tparticipants: '',\n\t\t\t\tparticipantMailIds: '',\n\t\t  }\n\t\t: {\n\t\t\t\teventName: '',\n\t\t\t\tdescription: '',\n\t\t\t\tsendNotification: false,\n\t\t\t\taddress: '',\n\t\t\t\tstartDate: '',\n\t\t\t\tendDate: '',\n\t\t\t\tisRecurring: '0',\n\t\t\t\trecurrenceDate: '',\n\t\t  };\n\n\t/**\n\t * Method used for get event api with id\n\t */\n\tuseEffect(() => {\n\t\tif (updateEventId.id) {\n\t\t\trefetch({ fetchEventId: parseInt(updateEventId.id) }).catch((err) => {\n\t\t\t\ttoast.error(err);\n\t\t\t});\n\t\t}\n\t}, [updateEventId.id]);\n\t/**\n\t * Method used for set value from event data by id\n\t */\n\tuseEffect(() => {\n\t\tif (EventData && updateEventId.id) {\n\t\t\tconst data = EventData?.fetchEvent?.data as SingleEventDataArr;\n\t\t\tsetToggleEvents(data?.send_notification);\n\t\t\tformik\n\t\t\t\t.setValues({\n\t\t\t\t\teventName: data?.event_name,\n\t\t\t\t\tdescription: data?.description,\n\t\t\t\t\tsendNotification: data?.send_notification,\n\t\t\t\t\taddress: data?.address,\n\t\t\t\t\tstartDate: getDateFormat(data?.start_date, DATE_FORMAT.DateHoursMinFormat),\n\t\t\t\t\tendDate: getDateFormat(data?.end_date, DATE_FORMAT.DateHoursMinFormat),\n\t\t\t\t\tisRecurring: data?.is_recurring == 'never' ? '0' : '1',\n\t\t\t\t\trecurrenceDate: data?.participant_mail_ids === null ? '' : getDateFormat(data?.recurrence_date, DATE_FORMAT.simpleDateFormat),\n\t\t\t\t\tparticipantMailIds: data?.participant_mail_ids === null || data?.participant_mail_ids.length === 0 ? '' : data?.participant_mail_ids.join(','),\n\t\t\t\t})\n\t\t\t\t.catch((err) => {\n\t\t\t\t\ttoast.error(err);\n\t\t\t\t});\n\t\t}\n\t}, [EventData]);\n\n\tconst formik = useFormik({\n\t\tinitialValues,\n\t\tvalidationSchema: addEventValidationSchema,\n\t\tonSubmit: (values) => {\n\t\t\tconst variables =\n\t\t\t\tvalues.isRecurring === '1'\n\t\t\t\t\t? {\n\t\t\t\t\t\t\teventName: values.eventName,\n\t\t\t\t\t\t\tdescription: values.description,\n\t\t\t\t\t\t\tsendNotification: toggleEvents,\n\t\t\t\t\t\t\taddress: values.address,\n\t\t\t\t\t\t\tstartDate: values.startDate,\n\t\t\t\t\t\t\tendDate: values.endDate,\n\t\t\t\t\t\t\tisRecurring: 'daily',\n\t\t\t\t\t\t\tparticipantMailIds: values?.participantMailIds?.split(','),\n\t\t\t\t\t\t\trecurrenceDate: formik.values.recurrenceDate,\n\t\t\t\t\t  }\n\t\t\t\t\t: {\n\t\t\t\t\t\t\teventName: values.eventName,\n\t\t\t\t\t\t\tdescription: values.description,\n\t\t\t\t\t\t\tsendNotification: toggleEvents,\n\t\t\t\t\t\t\taddress: values.address,\n\t\t\t\t\t\t\tstartDate: values.startDate,\n\t\t\t\t\t\t\tendDate: values.endDate,\n\t\t\t\t\t\t\tisRecurring: 'never',\n\t\t\t\t\t\t\tparticipantMailIds: values?.participantMailIds?.split(','),\n\t\t\t\t\t  };\n\t\t\tif (updateEventId.id) {\n\t\t\t\tupdateEvent({\n\t\t\t\t\tvariables: {\n\t\t\t\t\t\tupdateEventId: parseInt(updateEventId.id),\n\t\t\t\t\t\t...variables,\n\t\t\t\t\t},\n\t\t\t\t})\n\t\t\t\t\t.then((res) => {\n\t\t\t\t\t\tconst data = res.data as UpdateEventRes;\n\t\t\t\t\t\tif (data.updateEvent.meta.statusCode === 200) {\n\t\t\t\t\t\t\ttoast.success(data.updateEvent.meta.message);\n\t\t\t\t\t\t\tformik.resetForm();\n\t\t\t\t\t\t\tonCancel();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttoast.error(data.updateEvent.meta.message);\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.catch(() => {\n\t\t\t\t\t\ttoast.error(t('Failed to update'));\n\t\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tcreateEvent({\n\t\t\t\t\tvariables: {\n\t\t\t\t\t\t...variables,\n\t\t\t\t\t},\n\t\t\t\t})\n\t\t\t\t\t.then((res) => {\n\t\t\t\t\t\tconst data = res.data as CreateEventRes;\n\t\t\t\t\t\tif (data.createEvent.meta.statusCode === 200) {\n\t\t\t\t\t\t\ttoast.success(data.createEvent.meta.message);\n\t\t\t\t\t\t\tnavigate(`/${ROUTES.app}/${ROUTES.event}/list`);\n\t\t\t\t\t\t\tformik.resetForm();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttoast.error(data.createEvent.meta.message);\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.catch(() => {\n\t\t\t\t\t\ttoast.error(t('Failed to create'));\n\t\t\t\t\t});\n\t\t\t}\n\t\t},\n\t});\n\t/**\n\t * on clicking cancel it will redirect to main events page\n\t */\n\tconst onCancel = useCallback(() => {\n\t\tnavigate(`/${ROUTES.app}/${ROUTES.event}/list`);\n\t}, []);\n\tconst getErrorEvents = (fieldName: keyof CreateEvent) => {\n\t\treturn formik.errors[fieldName] && formik.touched[fieldName] ? formik.errors[fieldName] : '';\n\t};\n\tconst OnBlurEvent = useCallback((e: React.FocusEvent<HTMLInputElement> | React.FocusEvent<HTMLTextAreaElement> | React.ChangeEvent<HTMLInputElement>) => {\n\t\tformik.setFieldValue(e.target.name, whiteSpaceRemover(e));\n\t}, []);\n\n\treturn (\n\t\t<div>\n\t\t\t<WithTranslateFormErrors errors={formik.errors} touched={formik.touched} setFieldTouched={formik.setFieldTouched}>\n\t\t\t\t<form className='w-full bg-white shadow-md rounded pt-6 mb-4 border border-[#c8ced3]' onSubmit={formik.handleSubmit}>\n\t\t\t\t\t<div className='flex justify-end pr-8 pb-2'>\n\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t{t('Fields marked with')} <span className='text-red-500'>*</span> {t('are mandatory.')}\n\t\t\t\t\t\t</p>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className='grid grid-cols-1 md:grid-cols-2  gap-6  px-8'>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<TextInput required={true} placeholder={t('Event Name')} name='eventName' onChange={formik.handleChange} label={t('Event Name')} value={formik.values.eventName} error={getErrorEvents('eventName')} onBlur={OnBlurEvent} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<label className='block text-gray-700 text-sm font-normal mb-2'>{t('Send Notifications')}</label>\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\t\tonClick={(e: React.MouseEvent<HTMLSpanElement>) => {\n\t\t\t\t\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\t\t\t\t\tsetToggleEvents((prev) => !prev);\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\tclassName='font-medium text-blue-600 dark:text-blue-500 hover:underline'\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<label className='relative inline-flex items-center cursor-pointer '>\n\t\t\t\t\t\t\t\t\t\t<input type='checkbox' value={toggleEvents === true ? 1 : 0} className='sr-only peer' name='sendNotification' checked={toggleEvents} />\n\t\t\t\t\t\t\t\t\t\t<div className={'w-11 h-6 bg-gray-200 rounded-full peer peer-focus:ring-4 peer-focus:ring-red-700 dark:peer-focus:ring-red-800 dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content- after:absolute after:top-0.5 after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-primary'}></div>\n\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<label className='block text-gray-700 text-sm font-normal mb-2' htmlFor='password'>\n\t\t\t\t\t\t\t\t{t('Description')} <span className='text-red-500'>*</span>\n\t\t\t\t\t\t\t</label>\n\n\t\t\t\t\t\t\t<div className={'  shadow appearance-none   border rounded w-full  text-gray-700 flex items-center'}>\n\t\t\t\t\t\t\t\t<textarea className={'w-full py-2 px-3'} id='Description' placeholder={`${t('Description')}`} name='description' onChange={formik.handleChange} value={formik.values.description} rows={2} cols={50} onBlur={OnBlurEvent}></textarea>\n\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t{formik.errors.description != undefined && formik.touched.description && <p className='error'>{t(formik.errors.description)}</p>}\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<label className='block text-gray-700 text-sm font-normal mb-2' htmlFor='Address'>\n\t\t\t\t\t\t\t\t{t('Address')} <span className='text-red-500 '>*</span>\n\t\t\t\t\t\t\t</label>\n\n\t\t\t\t\t\t\t<div className=' shadow appearance-none   border rounded w-full  text-gray-700 flex items-center'>\n\t\t\t\t\t\t\t\t<textarea className={'w-full py-2 px-3'} id='Address' placeholder={`${t('Address')}`} name='address' onChange={formik.handleChange} value={formik.values.address} rows={2} cols={50} onBlur={OnBlurEvent}></textarea>\n\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t{formik.errors.address != undefined && formik.touched.address ? <p className='error'>{t(formik.errors.address)}</p> : ''}\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<TextInput required={true} type='datetime-local' id='startDate' placeholder={t('Start Date')} name='startDate' onChange={formik.handleChange} label={t('Start Date')} value={formik.values.startDate} error={getErrorEvents('startDate')} min={updateEventId.id ? `${formik.values.startDate}` : moment().format(DATE_FORMAT.DateHoursMinFormat)} disabled={!!updateEventId.id} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<TextInput required={true} type='datetime-local' placeholder={t('End Date')} name='endDate' id='endDate' onChange={formik.handleChange} label={t('End Date')} value={formik.values.endDate} min={formik.values.startDate} error={formik.values.startDate && getErrorEvents('endDate')} disabled={!formik.values.startDate} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<RadioButtonNew\n\t\t\t\t\t\t\t\tid='isRecurring'\n\t\t\t\t\t\t\t\tchecked={formik.values.isRecurring}\n\t\t\t\t\t\t\t\tonChange={formik.handleChange}\n\t\t\t\t\t\t\t\tname={'isRecurring'}\n\t\t\t\t\t\t\t\tradioOptions={[\n\t\t\t\t\t\t\t\t\t{ name: t('Never'), key: 0 },\n\t\t\t\t\t\t\t\t\t{ name: t('Daily'), key: 1 },\n\t\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t\t\tlabel={t('Recurrence')}\n\t\t\t\t\t\t\t\trequired={true}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div>{formik.values.isRecurring == '1' && <TextInput type='date' id='recurrenceDate' placeholder={t('recurrenceDate')} name='recurrenceDate' onChange={formik.handleChange} label={t('Recurrence Date')} value={formik.values.recurrenceDate} disabled={!(formik.values.startDate && formik.values.endDate)} />}</div>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t{EventData && updateEventId.id && (\n\t\t\t\t\t\t\t\t<div className='mb-4'>\n\t\t\t\t\t\t\t\t\t<TextInput type='text' id='participantMailIds' placeholder={t('Email')} name='participantMailIds' onChange={formik.handleChange} onBlur={OnBlurEvent} label={t('Add Participants')} value={formik.values.participantMailIds} />\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className='btn-group col-span-3 flex items-center py-3 px-5  justify-start bg-slate-100   border border-[#c8ced3]'>\n\t\t\t\t\t\t<Button className='btn-primary btn-normal' type='submit' label={updateEventId?.id ? t('Update') : t('Save')} \n\t\t\t\t\t\ttitle={`${updateEventId?.id ? t('Update') : t('Save')}`}>\n\t\t\t\t\t\t\t<CheckCircle className='mr-2 text-white ' />\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t<Button className='btn-warning btn-normal ' label={t('Cancel')} onClick={onCancel} title={`${t('Cancel')}`}>\n\t\t\t\t\t\t\t<Cross className='mr-1 fill-white' />\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</div>\n\t\t\t\t</form>\n\t\t\t</WithTranslateFormErrors>\n\t\t</div>\n\t);\n};\nexport default EditEvent;\n"],"names":["_ref","errors","touched","setFieldTouched","children","useTranslateFormErrors","i18n","useTranslation","useEffect","on","Object","keys","forEach","fieldName","includes","off","_jsx","_Fragment","DELETE_EVENT","gql","_templateObject","_taggedTemplateLiteral","UPDATE_EVENT","_templateObject2","CREATE_EVENT","_templateObject3","GROUP_DELETE_EVENTS","_templateObject4","GET_EVENTS","GET_EVENT_BY_ID","GET_DROPDOWNFILTER_DATA","VIEW_EVENT","EditEvent","t","data","EventData","refetch","useQuery","createEvent","useMutation","updateEvent","navigate","useNavigate","updateEventId","useParams","addEventValidationSchema","useValidation","toggleEvents","setToggleEvents","useState","initialValues","id","eventName","description","sendNotification","address","startDate","endDate","isRecurring","recurrenceDate","participants","participantMailIds","fetchEventId","parseInt","catch","err","toast","error","_EventData$fetchEvent","fetchEvent","send_notification","formik","setValues","event_name","getDateFormat","start_date","DATE_FORMAT","DateHoursMinFormat","end_date","is_recurring","participant_mail_ids","recurrence_date","simpleDateFormat","length","join","useFormik","validationSchema","onSubmit","values","_values$participantMa","_values$participantMa2","variables","split","then","res","meta","statusCode","success","message","resetForm","onCancel","concat","ROUTES","app","event","useCallback","getErrorEvents","OnBlurEvent","e","setFieldValue","target","name","whiteSpaceRemover","WithTranslateFormErrors","_jsxs","className","handleSubmit","TextInput","required","placeholder","onChange","handleChange","label","value","onBlur","onClick","preventDefault","prev","type","checked","htmlFor","rows","cols","undefined","min","moment","format","disabled","RadioButtonNew","radioOptions","key","Button","title","CheckCircle","Cross"],"sourceRoot":""}