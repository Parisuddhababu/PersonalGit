{"version":3,"file":"static/js/6129.63b4239f.chunk.js","mappings":"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","sources":["components/customHooks/useTranslationFormErrors.tsx","framework/graphql/mutations/manageRulesSets.ts","framework/graphql/queries/manageRulesSets.ts","views/rulesSetsManagement/addEditRulesSet.tsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { FormikErrors, FormikTouched, FormikValues } from 'formik';\n\nexport const useTranslateFormErrors = (errors: FormikErrors<FormikValues>, touched: FormikTouched<FormikValues>, setFieldTouched: (field: string, touched?: boolean, shouldValidate?: boolean) => Promise<FormikErrors<FormikValues>> | Promise<void>) => {\n\tconst { i18n } = useTranslation();\n\tuseEffect(() => {\n\t\ti18n.on('languageChanged', () => {\n\t\t\tObject.keys(errors).forEach((fieldName) => {\n\t\t\t\tif (Object.keys(touched).includes(fieldName)) {\n\t\t\t\t\tsetFieldTouched(fieldName);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t\treturn () => {\n\t\t\ti18n.off('languageChanged', () => {\n\t\t\t\treturn;\n\t\t\t});\n\t\t};\n\t}, [errors]);\n};\n\nconst WithTranslateFormErrors = ({ errors, touched, setFieldTouched, children }: { errors: FormikErrors<FormikValues>; touched: FormikTouched<FormikValues>; setFieldTouched: (field: string, touched?: boolean, shouldValidate?: boolean) => Promise<FormikErrors<FormikValues>> | Promise<void>; children: React.ReactNode }) => {\n\tuseTranslateFormErrors(errors, touched, setFieldTouched);\n\treturn <>{children}</>;\n};\n\nexport default WithTranslateFormErrors;\n","import { gql } from '@apollo/client';\nexport const UPDATE_MANAGE_RULES_SET = gql`\n  mutation UpdateSetRule(\n    $updateSetRuleId: Int\n    $ruleName: String\n    $description: String\n    $priority: priority\n    $onAction: on_action\n    $status: Int\n  ) {\n    updateSetRule(\n      id: $updateSetRuleId\n      rule_name: $ruleName\n      description: $description\n      priority: $priority\n      on_action: $onAction\n      status: $status\n    ) {\n      meta {\n        message\n        messageCode\n        statusCode\n        status\n      }\n    }\n  }\n`;\nexport const UPDATE_MANAGE_RULES_SETS_STATUS = gql`\n  mutation UpdateRuleStatus($updateRuleStatusId: Int, $status: Int) {\n    updateRuleStatus(id: $updateRuleStatusId, status: $status) {\n      data {\n        id\n        uuid\n        rule_name\n        description\n        priority\n        on_action\n        status\n        created_at\n        updated_at\n      }\n      meta {\n        message\n        messageCode\n        statusCode\n        status\n        type\n        errors {\n          errorField\n          error\n        }\n        errorType\n      }\n    }\n  }\n`;\nexport const DELETE_MANAGE_RULES_SETS = gql`\n  mutation DeleteSetRule($deleteSetRuleId: Int!) {\n    deleteSetRule(id: $deleteSetRuleId) {\n      meta {\n        message\n        messageCode\n        statusCode\n        status\n      }\n    }\n  }\n`;\nexport const CREATE_RULES_SET = gql`\n  mutation CreateSetRule(\n    $ruleName: String!\n    $description: String!\n    $priority: priority!\n    $onAction: on_action!\n    $createdBy: Int!\n  ) {\n    createSetRule(\n      rule_name: $ruleName\n      description: $description\n      priority: $priority\n      on_action: $onAction\n      created_by: $createdBy\n    ) {\n      meta {\n        message\n        messageCode\n        statusCode\n        status\n      }\n    }\n  }\n`;\nexport const GROUP_DELETE_RULES_SETS = gql`mutation GroupDeleteSetRules($groupDeleteSetRulesId: [Int]) {\n  groupDeleteSetRules(id: $groupDeleteSetRulesId) {\n    meta {\n      message\n      messageCode\n      statusCode\n      status\n      type\n      errors {\n        errorField\n        error\n      }\n      errorType\n    }\n  }\n}`;\n","import { gql } from '@apollo/client';\n\nexport const GET_RULES_SETS = gql`\n  query FetchSetRules(\n    $page: Int\n    $ruleName: String\n    $status: Int\n    $limit: Int\n    $sortBy: String\n    $sortOrder: String\n  ) {\n    fetchSetRules(\n      page: $page\n      rule_name: $ruleName\n      status: $status\n      limit: $limit\n      sortBy: $sortBy\n      sortOrder: $sortOrder\n    ) {\n      data {\n        ruleData {\n          id\n          uuid\n          rule_name\n          description\n          times_triggered\n          priority\n          on_action\n          status\n          created_at\n          updated_at\n        }\n        count\n      }\n      meta {\n        message\n        messageCode\n        statusCode\n        status\n      }\n    }\n  }\n`;\nexport const FETCH_RULES_SET_BY_ID = gql`\n  query FetchSingleSetRule($fetchSingleSetRuleId: ID) {\n    fetchSingleSetRule(id: $fetchSingleSetRuleId) {\n      data {\n        rule_name\n        description\n        priority\n        on_action\n        times_triggered\n        status\n      }\n      meta {\n        message\n        messageCode\n        statusCode\n        status\n      }\n    }\n  }\n`;\n","import { useMutation, useQuery } from '@apollo/client';\nimport Button from '@components/button/button';\nimport Dropdown from '@components/dropdown/dropDown';\nimport { CheckCircle, Cross } from '@components/icons/icons';\nimport TextInput from '@components/textInput/TextInput';\nimport { ROUTES } from '@config/constant';\nimport { CreateRulesSetRes, UpdateRuleSetRes } from '@framework/graphql/graphql';\nimport { CREATE_RULES_SET, UPDATE_MANAGE_RULES_SET } from '@framework/graphql/mutations/manageRulesSets';\nimport { FETCH_RULES_SET_BY_ID } from '@framework/graphql/queries/manageRulesSets';\nimport { useFormik } from 'formik';\nimport React, { useCallback, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { CreateRulesSet } from 'src/types/manageRulesSets';\nimport useValidation from '@framework/hooks/validations';\nimport { whiteSpaceRemover } from '@utils/helpers';\nimport WithTranslateFormErrors from '@components/customHooks/useTranslationFormErrors';\n\nconst AddEditRulesSets = () => {\n\tconst { t } = useTranslation();\n\tconst navigate = useNavigate();\n\tconst updateRuleSetId = useParams();\n\tconst { data: ruleData, refetch } = useQuery(FETCH_RULES_SET_BY_ID);\n\tconst [createRulesSet] = useMutation(CREATE_RULES_SET);\n\tconst [updateRulesSet] = useMutation(UPDATE_MANAGE_RULES_SET);\n\tconst { manageRuleSetValidationsSchema } = useValidation();\n\tconst initialValues: CreateRulesSet = {\n\t\truleName: '',\n\t\tdescription: '',\n\t\tpriority: '1',\n\t\tonAction: '',\n\t};\n\tconst PriorityDrp = [\n\t\t{ name: t('Low'), key: 'low' },\n\t\t{ name: t('High'), key: 'high' },\n\t\t{ name: t('Medium'), key: 'medium' },\n\t];\n\tconst onActionDrp = [\n\t\t{ name: t('Both'), key: 'both' },\n\t\t{ name: t('Signup'), key: 'signup' },\n\t\t{ name: t('Signin'), key: 'signin' },\n\t];\n\t/**\n\t *fetchs the data based on rules sets id\n\t */\n\tuseEffect(() => {\n\t\tif (updateRuleSetId?.id) {\n\t\t\trefetch({\n\t\t\t\tfetchSingleSetRuleId: parseInt(updateRuleSetId?.id),\n\t\t\t}).catch((err) => toast.error(err));\n\t\t}\n\t}, [updateRuleSetId?.id]);\n\t/**\n\t * Method used for setvalue from rules sets data by id\n\t */\n\n\tuseEffect(() => {\n\t\tif (ruleData?.fetchSingleSetRule && updateRuleSetId?.id) {\n\t\t\tconst data = ruleData?.fetchSingleSetRule?.data;\n\n\t\t\tformik\n\t\t\t\t.setValues({\n\t\t\t\t\truleName: data?.rule_name,\n\t\t\t\t\tdescription: data?.description,\n\t\t\t\t\tpriority: data?.priority,\n\t\t\t\t\tonAction: data?.on_action,\n\t\t\t\t})\n\t\t\t\t.catch((err) => {\n\t\t\t\t\ttoast.error(err);\n\t\t\t\t});\n\t\t}\n\t}, [ruleData?.fetchSingleSetRule]);\n\n\tconst validationSchema = manageRuleSetValidationsSchema;\n\tconst formik = useFormik({\n\t\tinitialValues,\n\t\tvalidationSchema,\n\t\tonSubmit: (values) => {\n\t\t\tif (updateRuleSetId.id) {\n\t\t\t\tupdateRulesSet({\n\t\t\t\t\tvariables: {\n\t\t\t\t\t\tupdateSetRuleId: parseInt(updateRuleSetId.id),\n\t\t\t\t\t\truleName: values.ruleName,\n\t\t\t\t\t\tdescription: values.description,\n\t\t\t\t\t\tpriority: values.priority,\n\t\t\t\t\t\tonAction: values.onAction,\n\t\t\t\t\t},\n\t\t\t\t})\n\t\t\t\t\t.then((res) => {\n\t\t\t\t\t\tconst data = res.data as UpdateRuleSetRes;\n\n\t\t\t\t\t\tif (data?.updateSetRule.meta.statusCode === 200) {\n\t\t\t\t\t\t\ttoast.success(data?.updateSetRule.meta.message);\n\t\t\t\t\t\t\tformik.resetForm();\n\t\t\t\t\t\t\tonCancel();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttoast.error(data.updateSetRule.meta.message);\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.catch(() => {\n\t\t\t\t\t\ttoast.error(t('Failed to update'));\n\t\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tcreateRulesSet({\n\t\t\t\t\tvariables: {\n\t\t\t\t\t\truleName: values.ruleName,\n\t\t\t\t\t\tdescription: values.description,\n\t\t\t\t\t\tpriority: values.priority,\n\t\t\t\t\t\tonAction: values.onAction,\n\t\t\t\t\t\tcreatedBy: 2,\n\t\t\t\t\t},\n\t\t\t\t})\n\t\t\t\t\t.then((res) => {\n\t\t\t\t\t\tconst data = res.data as CreateRulesSetRes;\n\n\t\t\t\t\t\tif (data.createSetRule.meta.statusCode === 200) {\n\t\t\t\t\t\t\ttoast.success(data.createSetRule.meta.message);\n\t\t\t\t\t\t\tnavigate(`/${ROUTES.app}/${ROUTES.manageRulesSets}/list`);\n\t\t\t\t\t\t\tformik.resetForm();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttoast.error(data.createSetRule.meta.message);\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.catch(() => {\n\t\t\t\t\t\ttoast.error(t('Failed to create'));\n\t\t\t\t\t});\n\t\t\t}\n\t\t},\n\t});\n\t/**\n\t * on clicking cancel it will redirect to main rules page\n\t */\n\n\tconst onCancel = useCallback(() => {\n\t\tnavigate(`/${ROUTES.app}/${ROUTES.manageRulesSets}/list`);\n\t}, []);\n\tconst OnBlurRules = useCallback((e: React.FocusEvent<HTMLInputElement> | React.FocusEvent<HTMLTextAreaElement> | React.ChangeEvent<HTMLInputElement>) => {\n\t\tformik.setFieldValue(e.target.name, whiteSpaceRemover(e));\n\t}, []);\n\treturn (\n\t\t<div>\n\t\t\t<div className='w-full'>\n\t\t\t\t<WithTranslateFormErrors errors={formik.errors} touched={formik.touched} setFieldTouched={formik.setFieldTouched}>\n\t\t\t\t\t<form className='bg-white shadow-md rounded  pt-6  mb-4 border border-[#c8ced3]' onSubmit={formik.handleSubmit}>\n\t\t\t\t\t\t<div className='flex justify-end pr-8 pb-2'>\n\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\tFields marked with <span className='text-red-500'>*</span> are mandatory.\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className='px-8 grid grid-cols-1 md:grid-cols-2  gap-6'>\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<TextInput required={true} type='text' id='ruleName' placeholder={t('Rule Name')} name='ruleName' onChange={formik.handleChange} onBlur={OnBlurRules} label={t('Rule Name')} value={formik.values.ruleName} error={formik.errors.ruleName && formik.touched.ruleName ? formik.errors.ruleName : ''} />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<label className='block text-gray-700 text-sm font-normal mb-2' htmlFor='description'>\n\t\t\t\t\t\t\t\t\t{t('Description')}\n\t\t\t\t\t\t\t\t\t<span className='text-red-500 ml-1'>*</span>\n\t\t\t\t\t\t\t\t</label>\n\n\t\t\t\t\t\t\t\t<div className={'  shadow appearance-none   border rounded w-full text-gray-700 flex items-center'}>\n\t\t\t\t\t\t\t\t\t<textarea id='description' placeholder={`${t('Description')}`} className='w-full py-2 px-3' name='description' onChange={formik.handleChange} onBlur={OnBlurRules} value={formik.values.description} rows={2} cols={50}></textarea>\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t{formik.errors.description != undefined && formik.touched.description ? <p className='error'>{t(formik.errors.description)}</p> : ''}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<Dropdown required={true} name='priority' onChange={formik.handleChange} value={formik.values.priority} options={PriorityDrp} id='priority' label={t('Priority')} error={formik.errors.priority && formik.touched.priority ? formik.errors.priority : ''} />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className='mb-5'>\n\t\t\t\t\t\t\t\t<Dropdown required={true} placeholder={t('Select Action')} name='onAction' onChange={formik.handleChange} value={formik.values.onAction} options={onActionDrp} id='onAction' label={t('On Action')} error={formik.errors.onAction && formik.touched.onAction ? formik.errors.onAction : ''} />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className='btn-group col-span-3 flex items-center py-3 px-5  justify-start bg-slate-100   border border-[#c8ced3]'>\n\t\t\t\t\t\t\t<Button className='btn-primary btn-normal' type='submit' label={updateRuleSetId.id ? t('Update') : t('Save')} \n\t\t\t\t\t\t\t title={`${updateRuleSetId.id ? t('Update') : t('Save')}`}>\n\t\t\t\t\t\t\t\t<CheckCircle className='mr-2 text-white ' />\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t<Button className='btn-warning btn-normal ' label={t('Cancel')} onClick={onCancel}  title={`${t('Close')}`} >\n\t\t\t\t\t\t\t\t<Cross className='mr-1 fill-white' />\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</form>\n\t\t\t\t</WithTranslateFormErrors>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\nexport default AddEditRulesSets;\n"],"names":["_ref","errors","touched","setFieldTouched","children","useTranslateFormErrors","i18n","useTranslation","useEffect","on","Object","keys","forEach","fieldName","includes","off","_jsx","_Fragment","UPDATE_MANAGE_RULES_SET","gql","_templateObject","_taggedTemplateLiteral","UPDATE_MANAGE_RULES_SETS_STATUS","_templateObject2","DELETE_MANAGE_RULES_SETS","_templateObject3","CREATE_RULES_SET","_templateObject4","GROUP_DELETE_RULES_SETS","_templateObject5","GET_RULES_SETS","FETCH_RULES_SET_BY_ID","AddEditRulesSets","t","navigate","useNavigate","updateRuleSetId","useParams","data","ruleData","refetch","useQuery","createRulesSet","useMutation","updateRulesSet","manageRuleSetValidationsSchema","useValidation","PriorityDrp","name","key","onActionDrp","id","fetchSingleSetRuleId","parseInt","catch","err","toast","error","fetchSingleSetRule","_ruleData$fetchSingle","formik","setValues","ruleName","rule_name","description","priority","onAction","on_action","validationSchema","useFormik","initialValues","onSubmit","values","variables","updateSetRuleId","then","res","updateSetRule","meta","statusCode","success","message","resetForm","onCancel","createdBy","createSetRule","concat","ROUTES","app","manageRulesSets","useCallback","OnBlurRules","e","setFieldValue","target","whiteSpaceRemover","className","WithTranslateFormErrors","_jsxs","handleSubmit","TextInput","required","type","placeholder","onChange","handleChange","onBlur","label","value","htmlFor","rows","cols","undefined","Dropdown","options","Button","title","CheckCircle","onClick","Cross"],"sourceRoot":""}